/*****
Copyright (c) 2018 Philippe Schmouker, Typee project, http://www.typee.ovh

Permission is hereby granted,  free of charge,  to any person obtaining a copy
of this software and associated documentation files (the "Software"),  to deal
in the Software without restriction, including  without  limitation the rights
to use,  copy,  modify,  merge,  publish,  distribute, sublicense, and/or sell
copies of the Software,  and  to  permit  persons  to  whom  the  Software  is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS",  WITHOUT WARRANTY OF ANY  KIND,  EXPRESS  OR
IMPLIED,  INCLUDING  BUT  NOT  LIMITED  TO  THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT  SHALL  THE
AUTHORS  OR  COPYRIGHT  HOLDERS  BE  LIABLE  FOR  ANY CLAIM,  DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT,  TORT OR OTHERWISE, ARISING FROM,
OUT  OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*****/


/*****   CODE FILE   ************************************************/

<code file> ::=  <statements list> <ENDOFFILE>




/*****   ATOMS   ****************************************************/

<atom element>              ::= <atom> 
                             |  <dotted name> <atom element'>
                             |  <const qualifier> <atom element'''>
                             |  <NONE> <none coalescing>                            ###
                             |  <atom element'''>
<atom element'>             ::= <atom element''>
##                             |  <dotted name'> <atom element'>                    ###
                             |  <function call> <atom element'>
                             |  <none coalescing>                                   ###
                             |  <subscription or slicing> <atom element'>
                             |  EPS
<atom element''>            ::= <is instance of>
                             |  <scalar type casting>
<atom element'''>           ::= <scalar type> <scalar type casting>
                             |  <set litteral>                                      ###

<atom>                      ::= <boolean>                                           ###
                             |  <decr> <dotted name> <incr or decr>
                             |  <dotted name> <incr or decr>                        ##
                             |  <enclosure>
                             |  <incr> <dotted name> <incr or decr>
                             |  <reference>
                             |  <scalar>
                             |  <string>

<boolean>                   ::= <TRUE>                                              ###
                             |  <FALSE>                                             ###

<bracket form>              ::= '[' <expression> <list or map form> ']'

<decr>                      ::= '--'

<enclosure>                 ::= <bracket form>
                             |  <parenthesis form>

<incr>                      ::= '++'

<incr or decr>              ::= <decr>  |  <incr>  |  EPS

<is instance of>            ::= '->' <dotted name>

<list or comprehension>     ::= <expr list'>
                             |  <for comprehension>
                             |  EPS
                 
<list or map form>          ::= <list form>
                             |  <map form>

<list form>                 ::= '[' <expression> <list or comprehension> ']'

<none coalescing>           ::= '?' <expression>                                    ###
                             |  EPS                                                 ###

<parenthesis form>          ::= '(' <expr list> ')'

<reference>                 ::= '@' <dotted name>

<scalar type casting>       ::= '(' <expression> ')'

<slice end>                 ::= ']'
                             |  ')'

<slice form>                ::= ':' <slice upper> <slice step>

<slice step>                ::= ':' <slice step'>
                             |  EPS
<slice step'>               ::= <expression>
                             |  EPS 

<slice upper>               ::= <expression>
                             |  EPS

<subscription or slicing>   ::= '[' <expression> <subscription or slicing'> <subscription or slicing''> ###
<subscription or slicing'>  ::= ']'                                                                     ###
                             |  <if comprehension>
                             |  <slice form> <slice end>
<subscription or slicing''> ::= '[' <expression> <subscription or slicing'> <subscription or slicing''> ###
                             |  EPS                                                                     ###


/*****   CLASSES   *******************************************/

<class declaration>         ::= <forward> <class decl def> <simple statement end>                       ###

<class definition>          ::= <class decl def> <class statements block>                               ###

<class decl def>            ::= 'class' <identifier> <template def> <inheritance>                       ###

<class statements block>    ::= '{' <class statements list> '}'                                         ###

<class statements list>     ::= <access protection statement> <class statements list>                   ###
                             |  <access qualifier> <decl or def statement> <class statements list>      ###
                             |  <decl or def statement> <class statements list>                         ###
                             |  <empty statement> <class statements list>                               ###
                             |  EPS                                                                     ###


<inheritance>               ::= ':' <inheritance item> <inheritance'>
                             |  EPS
<inheritance'>              ::= ',' <inheritence item> <inheritance'>
                             |  EPS

<inheritance item>          ::= <access qualifier> <inheritance item'>    
                             |  <inheritance item'>                            
<inheritance item'>         ::= <dotted name> <template args>                




/*****   COMPREHENSION   ********************************************/

<for comprehension>     ::= 'for' '(' <typed targets list> 'in' <or test> <iter comprehension> ')'      ###

<if comprehension>      ::= 'if' '(' <condition or unnamed func> ')' <iter comprehension>

<iter comprehension>    ::= <for comprehension>
                         |  <if comprehension>
                         |  EPS




/*****   CONDITIONS and COMPARISONS   *******************************/

<condition>     ::= <or test> <condition'>
<condition'>    ::= 'if' <or test> 'else' <expression>
                 |  EPS

<and test>      ::= <not test> <and test'>
<and test'>     ::= 'and' <not test>
                 |  EPS

<comparison>    ::= <bitor expr> <comparison'>
<comparison'>   ::= <comp operator> <template args> <bitor expr> <comparison'>
                 |  <comp operator'> <spaced template args> <bitor expr> <comparison'>
                 |  EPS

<condition or unnamed func> ::= <or test>
                             |  <unnamed func>          ##

<not test>      ::= 'not' <not test>
                 |  <comparison>

<or test>       ::= <and test> <or test'>
<or test'>      ::= 'or' <and test>
                 |  EPS



/*****   EXPRESSIONS   **********************************************/

<expression>    ::= <condition>
                 |  <unnamed func>


<arithmetic expr>   ::= <term> <arithmetic expr'>
<artihmetic expr'>  ::= '+' <template args> <term> <arithmetic expr'>
                     |  '-' <template args> <term> <arithmetic expr'>
                     |  EPS

<expr list>     ::= <expression> <expr list'>
<expr list'>    ::= ',' <expression> <expr list'>
                 |  EPS

<factor>        ::= <atom element> <factor'>
<factor'>       ::= '**' <template args> <unary expr>
                 |  '^^' <template args> <unary expr>
                 |  EPS

<identifier>    ::= '_' <identifier'>
                 |  <alpha char> <identifier'>
<identifier'>   ::= <alpha num char> <identifier'>
                 |  '_' <identifier'>
                 |  EPS

<indexed expr list> ::= 'indexed' '(' <expr list> ')'   ###
                     |  <expr list>                     ###

<map form>    ::= ':' <expression> <map list or comprehension>

<map entry>   ::= <expression> ':' <expression>

<map list>    ::= ',' <map entry> <map list>
               |  EPS
             
<map list or comprehension> ::= ',' <map entry> <map list>
                             |  <for comprehension>
                             |  EPS                         ###

<bitand expr>   ::= <shift expr> <bitand expr'>
<bitand expr'>  ::= '&' <template args> <shift expr> <bitand expr'>
                 |  EPS

<bitor expr>    ::= <bitxor expr> <bitor expr'>
<bitor expr'>   ::= '|' <template args> <bitxor expr> <bitor expr'>
                 |  EPS
             
<bitxor expr>   ::= <bitand expr> <bitxor expr'>
<bitxor expr'>  ::= '^' <template args> <bitand expr> <bitxor expr'>
                 |  EPS

<shift expr>    ::= <arithmetic expr> <shift expr'>
<shift expr'>   ::= '<<'  <spaced template args> <arithmetic expr> <shift expr'>
                 |  '>>'  <template args> <arithmetic expr> <shift expr'>
                 |  '<<<' <spaced template args> <arithmetic expr> <shift expr'>
                 |  '>>>' <template args> <arithmetic expr> <shift expr'>
                 |  EPS

<term>          ::= <factor> <term'>
<term'>         ::= '*' <template args> <factor> <term'>
                 |  '/' <template args> <factor> <term'>
                 |  '%' <template args> <factor> <term'>
                 |  '@' <template args> <factor> <term'>
                 |  '><' <spaced template args> <factor> <term'>
                 |  '!!' <template args> <factor> <term'>
                 |  '::' <template args> <factor> <term'>
                 |  EPS

<unary expr>    ::= <factor>
                 |  '+' <factor>
                 |  '-' <factor>
                 |  '~' <factor>
                 |  '#' <factor>




/*****   FUNCTIONS   ************************************************/

<function declaration>      ::= <template def> <function declaration'>              ##
                             |  <function declaration'>                             ##
<function declaration'>     ::= <function args declaration>                         ##

<function definition>       ::= <template def> <function definition'>
                             |  <function definition'>
<function definition'>      ::= <function args declaration> <statements block>


<abstract or final qualif>  ::= 'abstract'  |  'final'                              ##
##                             |  <final qualifier>
                             |  EPS

## <abstract qualifier>        ::= 'abstract'                                       ##

## <final qualifier>           ::= 'final'                                          ##

<function args declaration> ::= '(' <typed args list> ')'

<function call>             ::= <template args> '(' <function call args> ')'

<function call args>        ::= <expression> <function call args'>
                             |  EPS
<function call args'>       ::= ',' <function call args">
                             |  <for comprehension>
                             |  EPS
<function call args">       ::= <expression> <function call args'>
                             |  <ellipsis> <identifier>

<returned type>     ::= <TYPE>
                     |  EPS

<typed args list>   ::= <TYPE> <var or func identifier> <typed args list'>          ###
                     |  EPS
<typed args list'>  ::= ',' <TYPE> <var or func identifier> <typed args list'>      ###
                     |  EPS

<unnamed>   ::= 'unnamed'
             |  'lambda'

<unnamed func> ::= <unnamed> <returned type> <function args declaration> <statements block>

<var or func identifier>    ::= <identifier> <var or func identifier'>              ###
<var or func identifier'>   ::= <enclosed types list>                               ###
                             |  EPS                                                 ###




/*****   MISC   *****************************************************/

<alpha char>                    ::= 'A'...'Z'
                                 |  'a'...'z'

<alpha num char>                ::= <alpha char>
                                 |  <num char>

<any string quote char>         ::= u0x0000...u0xFFFF - ["'", "\\", "\n", "\r", "\f", u0x00]
<any string doublequote char>   ::= u0x0000...u0xFFFF - ['"', '\\', '\n', '\r', '\f', u0x00]
<any escaped char>              ::= '\\' u0x0000...u0xFFFF - ['\n', '\r', '\f', u0x00]

<any non newline char>          ::= u0x0000...u0xFFFF - ['\n', '\r', '\f']

<any non star char>             ::= u0x0000...u0xFFFF - ['*']

<any embedded code char>        ::= u0x0000...u0xFFFF - ['}']

<binary char>                   ::= '0'
                                 |  '1'


##<line end>                      ::= <NEWLINE>                                     ###
##                                 |  <ENDOFFILE>                                   ###

<ellipsis>                      ::= '...'

<ENDOFFILE>                     ::= u0x00

<escaped char>                  ::= '\\' <escaped char'>
<escaped char'>                 ::= <alpha char>
                                 |  '0' <escaped char''>
<escaped char''>                ::= 'x' <hexa char> <hexa char> <escaped char'''>   ###
                                 |  'X' <hexa char> <hexa char> <escaped char'''>   ###
                                 |  <octal char> <octal char> <octal char>          ##
<escaped char'''>               ::= <hexa char> <hexa char>                         ###
                                 |  EPS                                             ###

<FALSE>                         ::= 'False'
                                 |  'false'

<hexa char>                     ::= <num char>
                                 |  'A'...'F'
                                 |  'a'...'f'

<line end>                      ::= <NEWLINE>                                       ###
                                 |  <ENDOFFILE>                                     ###

<ME>                            ::= 'me'

<NEWLINE>                       ::= '\n'  |  '\r'  |  '\f'

<NONE>                          ::= 'None'
                                 |  'none'    

<num char>                      ::= '0'...'9'

<octal char>                    ::= '0'...'7'

<TRUE>                          ::= 'True'
                                 |  'true'




/*****   OPERATORS   ************************************************/

<operator>              ::= <operator">                                                     ###
                         |  <assign op>
                         |  <incr decr op>                                                  ###
##                         |  <cast op>                                                     ###
<operator'>             ::= '<'  |  '>'  |  '<<'  |  '<<<'  |  '>>'  |  '>>>'               ###
<operator">             ::= '<='  |  '=='  |  '!='  |  '>='                                 ###
                         |  '+'   |  '-'   |  '*'   |  '/'  |  '%'  |  '**'  |  '^^'        ###
                         |  '&'   |  '|'   |  '^'                                           ###
                         |  '@'   |  '><'  |  '!!'  |  '::'  |  '??'                        ###
                         |  '#'                                                             ###
                         |  'in'                                                            ###
                         |  <assign op>                                                     ###
                         
<assign op>             ::= '='
                         |  <augmented assign op>

<augmented assign op>   ::= '+='
                         |  '-='
                         |  '*='
                         |  '/='
                         |  '%='
                         |  '&='
                         |  '|='
                         |  '^='
                         |  '<<='
                         |  '<<<='
                         |  '>>='
                         |  '>>>='
                         |  '**='
                         |  '^^='
                         |  '@='
                         |  '><='
                         |  '!!='
                         |  '::='
                         |  '??='

<call operator>         ::= '(' ')'

<comp operator>         ::= '<='  |  '=='  |  '!='  |  '>='
                         |  'in'
                         |  <is operator>
                         |  'not' 'in'
<comp operator'>        ::=  '<'  |  '>'

<incr decr op>          ::= '++'                                                                            ###
                         |  '--'                                                                            ###
                         
<is operator>           ::= 'is' <is operator'>
<is operator'>          ::= 'not'
                         |  EPS

<operator declaration>  ::= 'operator' <operator declaration'>
<operator declaration'> ::= <operator"> <template def> <function args declaration>                          ###
                         |  <operator'> <spaced template def> <function args declaration>
                         |  <incr decr op> <template def> <pre or post> <function args declaration>         ###
                         |  <call operator> <template def>

<operator definition>   ::= <operator declaration> <statements block>                                       ###
##<operator definition'>  ::= <operator"> <template def> <function args declaration>                        ###
##                         |  <operator'> <spaced template def> <function args declaration>                 ###
##                         |  <incr decr op> <template def> <pre or post> <function args declaration>       ###
##                         |  <call operator> <template def>                                                ###

<pre or post>           ::= 'pre'                                                                           ###
                         |  'post'                                                                          ###



/*****   SCALARS   **************************************************/

<scalar>    ::= <decimal number>
             |  <octal hexa binary number>


<binary number>   ::= <binary char> <binary number'>
##                   |  '_' <binary char> <binary number'>          ##
<binary number'>  ::= <binary char> <binary number'>
                   |  '_' <binary char> <binary number'>
                   |  EPS

<decimal number>    ::= '1'...'9' <decimal number'>
<decimal number'>   ::= <num char> <decimal number'>
                     |  '_' <num char> <decimal number'>
                     |  <fraction part> <exponent part>
                     |  EPS
                     
<decimal part>      ::= <num char> <decimal part'>
<decimal part'>     ::= <num char> <decimal part'>
                     |  '_' <num char> <decimal part'>
                     |  EPS

<exponent part>     ::= 'e' <exponent part'>
                     |  'E' <exponent part'>
                     |  EPS
<exponent part'>    ::= '+' <decimal part>
                     |  '-' <decimal part>
                     |  <decimal part>

<fraction part>     ::= '.' <fraction part'>
                     |  EPS
<fraction part'>    ::= <decimal part>
                     |  EPS

<hexadecimal number>     ::= <hexa char> <hexadecimal number'>
##                          |  '_' <hexa char> <hexadecimal number'>        ##
<hexadecimal number'>    ::= <hexa char> <hexadecimal number'>
                          |  '_' <hexa char> <hexadecimal number'>
                          |  EPS

<integer number>    ::= '1'...'9' <integer number'>
                     |  <octal hexa binary number>
<interger number'>  ::= <num char> <decimal number'>
                     |  '_' <num char> <decimal number'>
                     |  EPS
             
<octal hexa binary number>  ::= '0' <octal hexa binary>
<octal hexa binary>         ::= <octal number>
                             |  'b' <binary number>
                             |  'B' <binary number>
                             |  'x' <hexadecimal number>
                             |  'X' <hexadecimal number>

<octal number>      ::= <octal char> <octal number'>
                     |  '_' <octal char> <octal number'>
                     |  EPS
<octal number'>     ::= <octal char> <octal number'>
                     |  '_' <octal char> <octal number'>
                     |  EPS




/*****   STATEMENTS   ****************************************/

<statements list>   ::= <empty statement> <statements list>
                     |  <compound statement> <statements list>
                     |  <simple statement> <statements list>
                     |  <statements block> <statements list>
                     |  EPS

<compound statement>    ::= <assign decl def func-call statement>
                         |  <embed statement>
                         |  <for statement>
                         |  <forever statement>
                         |  <if statement>
                         |  <repeat statement>
                         |  <switch statement>
                         |  <try statement>
                         |  <while statement>
                         |  <with statement>

<simple statement>  ::= <access protection statement> <simple statement end>
                     |  <assert statement> <simple statement end>
                     |  <del statement> <simple statement end>
                     |  <ensure statement> <simple statement end>
                     |  <file flushing> <simple statement end>                      ###
                     |  <flow statement> <simple statement end>
                     |  <import statement> <simple statement end>
                     |  <nop statement> <simple statement end>
                     |  <require statement> <simple statement end>

<simple statement end> ::= ';'

<statements block>  ::= '{' <statements list> '}'
                     |  <compound statement>                    ###
                     |  <empty statement>                       ###
                     |  <nop statement> <simple statement end>
                     |  <simple statement>                      ###
                     |  <simple statement end>


<abstract or final qualif>  ::= 'abstract'  |  'final'                              ##
##                             |  <final qualifier>
                             |  EPS

<access protection statement>  ::= ':' <access qualifier> ':'

<access qualifier>  ::= 'hidden'
                     |  'local'
                     |  'private'
                     |  'protected'
                     |  'public'

<array content>         ::= '[' (<items list> | <array content>) ']'

<array declaration>     ::= <array type> <identifier> <array declaration'>          ###
<array declaration'>    ::= '=' <array content>                                     ###
                         |  EPS                                                     ###

<assert statement>  ::= 'assert' <expression> <assert statement'>
<assert statement'> ::= ',' <expression>
                     |  EPS

<assign decl def func-call statement>   ::= <access qualifier> <decl or def statement>
                                         |  <decl or def statement>
                                         |  <dotted name> <assign or func-call statement> <simple statement end>

<assign or func-call statement> ::= <target list'> <assignment statement>
                                 |  <function call>

<assignment statement>    ::= <assign op> <expr list>

<case>      ::= 'case' <expr list> <statements block>

##<cast op>   ::= 'cast' <identifier>                                                                               ###

<comment>   ::= '//' <comment'>
             |  '/*' <multi lines comment>
<comment'>  ::= <any non newline char> <comment'>
             |  <line end>                                                                                          ###

<container declaration>     ::= <array declaration>                                                                 ###
                             |  <file declaration>                                                                  ###
                             |  <list declaration>                                                                  ###
                             |  <map declaration>                                                                   ###
                             |  <set declaration>                                                                   ###

<decl constructor or decl end> ::= <dotted name'> <decl or def statement''''>
                                |  <function definition'>

<decl or def statement>     ::= <static qualifier> <decl or def statement'>
                             |  <class definition>
                             |  <decl or def statement'>
                             |  <forward decl> <simple statement end>                                               ###
<decl or def statement'>    ::= <abstract or final qualif> <method or operator definition>                          ##
                             |  <enum definition>                                                                   ###
                             |  <type alias> <simple statement end>
                             |  <volatile qualifier> <type> <identifier> <memory address> <simple statement end>
                             |  <decl or def statement''>
<decl or def statement''>   ::= ##<TYPE'> <decl or def statement'''>                                                ###
                                <const qualifier> <decl or def statement'''>                                        ###
                             |  <decl or def statement'''>                                                          ###
                             |  <identifier> <decl constructor or decl end>
<decl or def statement'''>  ::= <non container type> <decl or def statement''''>                                    ###
                             |  <container declaration>                                                             ###
<decl or def statement''''> ::= <identifier> <decl or def statement'''''>                                           ###
                             |  <operator definition>
<decl or def statement'''''>::= <function definition>                                                               ###
                             |  <var declaration or assignment> <simple statement end>

### <declaration or definition statement>   ::= '=' <expression> <declaration statement>                                ## !!!
###                                          |  '<' <types list> '>' <function args declaration>
###                                          |  <declaration statement>
###                                          |  <function args declaration>

### <declaration statement>     ::= ',' <identifier> <declaration statement'>                                           ## !!!
###                              |  EPS
### <declaration statement'>    ::= '=' <expression> <declaration statement>                                            ## !!!
###                              |  <declaration statement>

<del statement>             ::= <delete> <targets list>                         ###
<delete>                    ::= 'del'  |  'delete'                              ###
                      
<dotted as name>            ::= <dotted name> <dotted as name'>
<dotted as name'>           ::= 'as' <identifier>
                             |  EPS

<dotted as names>           ::= <dotted as names''> <dotted as names'>          ###
<dotted as names'>          ::= ',' <dotted as names''> <dotted as names'>      ###
                             |  EPS                                             ###
<dotted as names''>         ::= '.' <dotted as names''>                         ###
                             |  <dotted as name>                                ###

<dotted name>               ::= <identifier> <dotted name'>
<dotted name'>              ::= '.' <identifier> <dotted name'>
                             | EPS

<embed statement>           ::= 'embed' <language> <embed statement'>
<embed statement'>          ::= <dotted name> <simple statement end>
                             |  <embedded language code>

<embedded language code>    ::= '{{' <embedded language code'>
<embeded language code'>    ::= <any embedded code char> <embeded language code'>
                             |  '}' <embedded language code">
<embedded language code">   ::= <any embedded code char> <embeded language code'>
                             |  '}'

<empty statement>           ::= <comment>
                             |  <NEWLINE>

<ensure statement>          ::= 'ensure' <expression> <ensure statement'>
<ensure statement'>         ::= ',' <expression>
                             |  EPS

<enum definition>           ::= <enum type> <identifier> '{' <enum list> '}'                ###

<enum item>                 ::= <identifier> <enum item'>                                   ###
<enum item'>                ::= '=' <expression>                                            ###
                             |  EPS                                                         ###

<enum list>                 ::= <enum item> <enum list'>                                    ###
                             |  EPS                                                         ###
<enum list'>                ::= ',' <enum item> <enum list'>                                ###
                             |  EPS                                                         ###

<file flushing>             ::= '!' <dotted name> <file flushing'>                          ###
<file flushing'>            ::= '(' <expression> <file flushing''> ')'                      ###
                             |  '[' <expression> ']'                                        ###
                             |  '>>' <expression>                                           ###
                             |  '>>>' <expression>                                          ###
                             |  EPS                                                         ###
<file flushing''>           ::= ',' <expression>                                            ###
                             |  EPS                                                         ###

<flow statement>            ::= 'break'
                             |  'continue'
                             |  <raise statement>
                             |  <return statement>

<for statement>             ::= 'for' '(' <typed targets list> 'in' <indexed expr list> ')' <statements block> <for statement'>     ###
<for statement'>            ::= 'otherwise' <statements block>                                                                      ##
                             |  EPS

<forever statement>         ::= 'forever' '(' ')' <statements block>

<forward>                   ::= 'forward'                                                   ##
                             |  'fwd'                                                       ##

<forward decl>              ::= <forward> <forward decl'>                                   ##
<forward decl'>             ::= <static qualifier> <forward decl''>                         ##
                             |  <forward decl''>                                            ##
                             |  <fwd class decl>                                            ##
<forward decl''>            ::= <volatile qualifier> <type> <identifier>                    ##
                             |  <fwd type decl>                                             ##
                             |  <forward decl'''>                                           ##
<forward decl'''>           ::= <TYPE'> <forward decl''''>                                  ##
                             |  <identifier> <fwd decl constructor>                         ##
<forward decl''''>          ::= <identifier> <forward decl'''''>                            ##
                             |  <operator declaration>                                      ##
<forward decl'''''>         ::= <function declaration>                                      ##
                             |  <fwd var decl>                                              ##

<fwd class decl>            ::= 'class' <identifier> <template def> <fwd class decl'>       ##
<fwd class decl'>           ::= <inheritance>                                               ##
                             |  EPS                                                         ##

<fwd type decl>             ::= 'type' <identifier>                                         ###

<fwd decl constructor>      ::= <dotted name'> <forward decl''''>                           ##
                             |  <function declaration'>                                     ##

<fwd var decl>              ::= ',' <identifier> <fwd var decl>                             ##
                             |  EPS                                                         ##
                             
<identifiers list>          ::= <dotted name> <identifiers list'>
<identifiers list'>         ::= ',' <dotted name> <identifiers list'>
                             |    EPS

<if statement>              ::= 'if' '(' <expression> ')' <statements block> <if statement'>
<if statement'>             ::= 'elseif' '(' <expression> ')' <statements block> <if statement'>        ##
                             |  'elif' '(' <expression> ')' <statements block> <if statement'>          ##
                             |  'elsif' '(' <expression> ')' <statements block> <if statement'>         ##
                             |  'else' <statements block>
                             |  EPS

<import as name>            ::= <identifier> <import as name'>
<import as name'>           ::= 'as' <identifier>
                             |  EPS

<import as names>           ::= <import as name> <import as names'>
<import as names'>          ::= ',' <import as name> <import as names'>
                             |  EPS

<import from>               ::= 'from' <import from'>
<import from'>              ::= '.' <import from'>
                             |  <dotted name> 'import' <import from''>                                  ###
<import from''>             ::= 'all'                                                                   ###
                             |  '(' <import as names> ')'                                               ###
                             |  <import as names>                                                       ###
                     
<import name>               ::= 'import' <import name'>                                                 ###
<import name'>              ::= '.' <import name'>                                                      ###
                             |  <dotted as names>                                                       ###

<import statement>          ::= <import name>
                             |  <import from>

<items list>                ::= <expression> <items list'>                                              ###
                             |  EPS                                                                     ###
<items list'>               ::= ',' <expression> <items list'>                                          ###
                             |  EPS                                                                     ###

<language>                  ::= 'cpp'  |  'java'  |  'python'  |  'py'  |  'javascript'  |  'm6809'  |  'C#'    ###

<list content>              ::= '[' (<items list> | <list content>) ']'                                 ###

<list declaration>          ::= <list type> <identifier> <list declaration'>                            ###
<list declaration'>         ::= '=' <list content>                                                      ###
                             |  EPS                                                                     ###

<map declaration>           ::= <map type> <identifier> <map declaration'>                              ###
<map declaration'>          ::= '=' '[' <expression> <map form> ']'                                     ###
                             |  EPS                                                                     ###

<memory address>            ::= '@' <integer number>
                             |  EPS

<method or operator definition>     ::= <returned type> <method or operator definition'>
<method or operator definition'>    ::= <operator definition>                                                
                                     |  <identifier> <function definition>                                    

<multi lines comment>       ::= '*' <multi lines comment'>
                             |  <any non star char> <multi lines comment>
                             |  <NEWLINE> <multi lines comment>
                             |  EPS
<multi lines comment'>      ::= '/'
                             |  <multi lines comment>

<nop statement>             ::= 'nop'
                             |  'pass'

<raise statement>           ::= 'raise' <expression> <raise statement'>
<raise statement'>          ::= 'from' <expression>
                             |  EPS

<repeat statement>          ::= 'repeat' <statements block> 'until' '(' <expression> ')' <simple statement end>                 ## 

<require statement>         ::= 'require' <expression> <require statement'>
<require statement'>        ::= ',' <expression>
                             |  EPS


<return statement>          ::= 'ret' <return statement'>
                             |  'return' <return statement'>
<return statement'>         ::= <expr list>
                             |  EPS

<set declaration>           ::= <set type> <identifier> <set declaration'>                              ###
<set declaration'>          ::= '=' <set litteral>                                                      ###
                             |  EPS                                                                     ###

<set item>                  ::= <expression> <set item'>                                                ###
<set item'>                 ::= <for comprehension>                                                     ###
                             |  EPS                                                                     ###

<set items list>            ::= <set item> <set items list'>                                            ###
<set items list'>           ::= ',' <set item> <set items list'>                                        ###
                             |  EPS                                                                     ###

<set litteral>              ::= '[' <set items list> ']'                                                ###
                             |  <set type> '(' <set items list> ')'                                     ###

<switch block>              ::= <case> <switch block>
                             |  EPS

<switch statement>          ::= 'switch' '(' <expression> ')' '{' <switch block> '}' <switch statement'>
<switch statement'>         ::= 'otherwise' <statements block>                                                                  ##
                             |  EPS

<target>                    ::= <dotted name> <target'>
<target'>                   ::= <subscription or slicing> <target'>
                             |  EPS

<targets list>              ::= <target> <targets list'>                    ###
<targets list'>             ::= ',' <target> <targets list'>                ###
                             |  EPS

<try else>                  ::= 'otherwise'                                                                                     ##

<try except>                ::= 'except' '(' <try except'> ')'
<try except'>               ::= <expression> <try except''> <try except'''>                                                     ###
                             |  'all'
                             |  EPS
<try except''>              ::= 'as' <identifier>
                             |  EPS
<try except'''>             ::= ',' <expression> <try except''> <try except'''>                                                 ###
                             |  EPS                                                                                             ###

<try finally>               ::= 'finally'

<try statement>             ::= 'try' <statements block> <try statement excepts> <try statement else> <try statement finally>   ##
<try statement excepts>     ::= <try except> <statements block> <try statements excepts'>                                       ##
<try statement excepts'>    ::= <try except> <statements block> <try statement excepts'>                                        ##
                             |  EPS                                                                                             ##
<try statement else>        ::= <try else> <statements block>                                                                   ##
                             |  EPS                                                                                             ##
<try statement finally>     ::= <try finally> <statements block>                                                                ##
                             |  EPS                                                                                             ##


<type alias>                ::= 'type' <type alias"> <type alias'>
<type alias'>               ::= ',' <type alias"> <type alias'>
                             |  EPS
<type alias">               ::= <TYPE> 'as' <identifier>

<typed target>              ::= <type'> <target>
                             |  <dotted name> <typed target'>
<typed target'>             ::= <dotted name> <target'>
                             |  <target'>
                             |  <templated type'> <target'>

<typed targets list>        ::= <typed target> <targets list'>                  ###
<typed targets list'>       ::= ',' <typed target> <targets list'>              ###
                             |  EPS

<var declaration or assignment>     ::= '=' <expression> <var declaration or assignment'>    
                                     |  ',' <identifier> <var declaration or assignment>    
                                     |  EPS                                                    
<var declaration or assignment'>    ::= ',' <identifier> <var declaration or assignment>    
                                     |  EPS                                                    

<while statement>           ::= 'while' '(' <expression> ')' <statements block> <while statement'>
<while statement'>          ::= 'otherwise' <statements block>                                                                  ##
                             |  EPS

<with item>                 ::= <expression> <with item'>
<with item'>                ::= 'as' <target>
                             |  EPS

<with items list>           ::= <with item> <with items list'>
<with items list'>          ::= ',' <with item> <with items list'>
                             |  EPS

<with statement>            ::= 'with' <with items list> <statements block>




/*****   STRINGS   **************************************************/

<string>            ::= <single string> <string'> <string methods>
<string'>           ::= <single string> <string'>
                     |  EPS

<string methods>    ::= '.' <identifier> <function call> <string methods'>
                     |  EPS
<string methods'>   ::= '.' <identifier> <function call> <string methods'>
                     |  EPS

<single string>     ::= "'" <single string'> "'"
                     |  '"' <single string"> '"'

<single string'>    ::= <any escaped char> <single string'>
                     |  <any string quote char> <single string'>
                     |  EPS

<single string">    ::= <any escaped char> <single string">
                     |  <any string doublequote char> <single string">
                     |  EPS




/*****   TEMPLATES   *****************************************/

<spaced template args>  ::= ' <' <template args'> '>'
                         |    EPS

<spaced template def>   ::= ' <' <template def'> '>'
                         |    EPS

<template args>         ::= '<' <template args'>
                         |  EPS
<template args'>        ::= <expression> <template args">
                         |  '>'
<template args">        ::= ',' <expression> <template args">
                         |  '>'

<template def>          ::= '<' <template def'>
                         |  EPS
<template def'>            ::= <template def''> <template def'''>
                         |  '>'
<template def''>        ::= <identifier>
                         |  <const qualifier> <template def const name>
<template def'''>       ::= ',' <template def''> <template def'''>
                         |  '>'

<template def const name>   ::= <scalar type or dotted name> <identifier> <template def const name'>
<template def const name'>  ::= '=' <expression>
                             |  EPS




/*****   TYPES   ****************************************************/

<TYPE>  ::= <const qualifier> <type>                
         |  <type>
<TYPE'> ::= <const qualifier> <type>
         |  <type'>

<type>  ::= <type'>
         |  <templated type> <dimensions>
<type'> ::= <auto type>
##         |  <container type>                                      ###
         |  <enclosed types list>                                   ###
         |  <enum type>
##         |  <file type>                                           ###
         |  <NONE>
         |  <scalar type> ##<dimensions>                            ###


<array type>            ::= 'array' <declared contained type> <dimensions>  ###

<auto type>             ::= '?' <auto type'>
<auto type'>            ::= 'in' <enclosed types list>              ###
                         |  EPS

<const qualifier>       ::= 'const'

## <contained type>        ::= <declared contained type>            ###
##                          |  EPS                                  ###

<container type>        ::= <array type>
                         |  <file type>                             ###
                         |  <list type>
                         |  <map type>
                         |  <set type>

<declared contained type>   ::= '<' <declared contained type'>                      ###
<declared contained type'>  ::= <TYPE> <declared contained type">                   ###
                             |  <enclosed types list> <declared contained type">    ###
<declared contained type">  ::= '>'                                                 ###

<dimensions>            ::= '[' <dimensions'> ']' <dimensions> 
                         |  EPS
<dimensions'>           ::= <integer number>
                         |  <dotted name>
                         |  EPS                                     ###

<enclosed types list>   ::= '(' <TYPE> <enclosed types list'> ')'   ###
<enclosed types list'>  ::= ',' <TYPE> <enclosed types list'>       ###
                         |  EPS                                     ###

<enum type>             ::= 'enum'

<file type>             ::= 'file' <declared contained type>        ###

<list type>             ::= 'list' <declared contained type>        ###

<map type>              ::= 'map' <declared contained type>         ###

<non container type>    ::= <type>

<scalar type>           ::= 'bool'
                         |  'char'
                         |  'char16'
                         |  'float32'
                         |  'float64'
                         |  'int8'
                         |  'int16'
                         |  'int32'
                         |  'int64'
                         |  'str'
                         |  'str16'
                         |  'uint8'
                         |  'uint16'
                         |  'uint32'
                         |  'uint64'

<scalar type or dotted name>    ::= <scalar type>
                                 |  <dotted name>

<set type>              ::= 'set' <declared contained type>         ###

<static qualifier>      ::= 'static'

<templated type>        ::=  <dotted name> <templated type'>
<templated type'>       ::= '<' <types and exprs list> '>'
                         |  EPS

<types and exprs list>  ::= <types and exprs list"> <types and exprs list'>
<types and exprs list'> ::= ',' <types and exprs list"> <types and exprs list'>
                         |  EPS
<types and exprs list"> ::= <expression>
                         |  <templated type>

<types list>            ::= <TYPE>                                  ###
                         |  <enclosed types list>                   ###
##<types list'>           ::= ',' <TYPE> <types list'>              ###
##                         |  EPS                                   ###

<volatile qualifier>    ::= 'volatile'


/*================================================================================================*/
