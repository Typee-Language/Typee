#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
Copyright (c) 2018-2019 Philippe Schmouker, Typee project, http://www.typee.ovh

Permission is hereby granted,  free of charge,  to any person obtaining a copy
of this software and associated documentation files (the "Software"),  to deal
in the Software without restriction, including  without  limitation the rights
to use,  copy,  modify,  merge,  publish,  distribute, sublicense, and/or sell
copies of the Software,  and  to  permit  persons  to  whom  the  Software  is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS",  WITHOUT WARRANTY OF ANY  KIND,  EXPRESS  OR
IMPLIED,  INCLUDING  BUT  NOT  LIMITED  TO  THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT  SHALL  THE
AUTHORS  OR  COPYRIGHT  HOLDERS  BE  LIABLE  FOR  ANY CLAIM,  DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT,  TORT OR OTHERWISE, ARISING FROM,
OUT  OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
"""

#=============================================================================
## THIS FILE HAS BEEN AUTOMATICALLY GENERATED BY Typee FRAMEWORK.
## DO NOT MODIFY IT: ANY MODIFICATION WOULD BE LOST ON NEXT USE.


#=============================================================================
from Commons.access                             import Access
from FrontEnd.IntermediateCode.fe_icode_tokens  import FEICodeTokens


#=============================================================================
class FEICodeTokenNode:
    """
    The class of nodes for the Front End Intermediate Code of the Typee Scanner.
    """    
    #-------------------------------------------------------------------------
    def __init__(self, scanner, tk_id:int, tk_data=None):
        '''
        Creates a node of Intermediate Code for the Front-End Typee Scanner.
        
        Args:
            tk_id: int
                The token identifier for this node.
            tk_data:
                The data related to this node. Defaults to None.
            scanner: FEScanner
                A reference to the calling scanner.
        '''
        self.num_line = scanner.num_line if scanner else 0
        self.num_coln = scanner.num_coln if scanner else 0
        self.tk_data  = tk_data
        self.tk_ident = tk_id

    #-------------------------------------------------------------------------
    def __eq__(self, other):
        return self.tk_ident == other.tk_ident  and  self.tk_data == other.tk_data
    #-------------------------------------------------------------------------
    @property
    def is_ABSTRACT(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_ABSTRACT
    @property
    def is_ALL(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_ALL
    @property
    def is_AND(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_AND
    @property
    def is_ANY_TYPE(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_ANY_TYPE
    @property
    def is_AROBASE(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_AROBASE
    @property
    def is_ARRAY(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_ARRAY
    @property
    def is_AS(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_AS
    @property
    def is_ASSERT(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_ASSERT
    @property
    def is_ASSIGN(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_ASSIGN
    @property
    def is_AUG_2COLN(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_AUG_2COLN
    @property
    def is_AUG_2EXCL(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_AUG_2EXCL
    @property
    def is_AUG_2QUEST(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_AUG_2QUEST
    @property
    def is_AUG_AROBASE(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_AUG_AROBASE
    @property
    def is_AUG_BITAND(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_AUG_BITAND
    @property
    def is_AUG_BITOR(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_AUG_BITOR
    @property
    def is_AUG_BITXOR(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_AUG_BITXOR
    @property
    def is_AUG_DIV(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_AUG_DIV
    @property
    def is_AUG_GRLE(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_AUG_GRLE
    @property
    def is_AUG_MINUS(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_AUG_MINUS
    @property
    def is_AUG_MOD(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_AUG_MOD
    @property
    def is_AUG_MUL(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_AUG_MUL
    @property
    def is_AUG_PLUS(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_AUG_PLUS
    @property
    def is_AUG_POWER(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_AUG_POWER
    @property
    def is_AUG_SHIFT0L(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_AUG_SHIFT0L
    @property
    def is_AUG_SHIFT0R(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_AUG_SHIFT0R
    @property
    def is_AUG_SHIFTL(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_AUG_SHIFTL
    @property
    def is_AUG_SHIFTR(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_AUG_SHIFTR
    @property
    def is_BITAND(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_BITAND
    @property
    def is_BITOR(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_BITOR
    @property
    def is_BITXOR(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_BITXOR
    @property
    def is_BRACECL(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_BRACECL
    @property
    def is_BRACEOP(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_BRACEOP
    @property
    def is_BRACKETCL(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_BRACKETCL
    @property
    def is_BRACKETOP(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_BRACKETOP
    @property
    def is_BREAK(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_BREAK
    @property
    def is_CASE(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_CASE
    @property
    def is_CAST(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_CAST
    @property
    def is_CLASS(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_CLASS
    @property
    def is_COLON(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_COLON
    @property
    def is_COMMA(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_COMMA
    @property
    def is_COMMENT(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_COMMENT
    @property
    def is_COMMENT_ML(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_COMMENT_ML
    @property
    def is_CONST(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_CONST
    @property
    def is_CONTINUE(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_CONTINUE
    @property
    def is_DECR(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_DECR
    @property
    def is_DEL(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_DEL
    @property
    def is_DIV(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_DIV
    @property
    def is_DOT(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_DOT
    @property
    def is_ELIF(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_ELIF
    @property
    def is_ELLIPSIS(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_ELLIPSIS
    @property
    def is_ELSE(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_ELSE
    @property
    def is_EMBED(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_EMBED
    @property
    def is_EMBED_CODE(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_EMBED_CODE
    @property
    def is_ENSURE(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_ENSURE
    @property
    def is_ENUM(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_ENUM
    @property
    def is_EOF(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_EOF
    @property
    def is_EQ(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_EQ
    @property
    def is_EXCEPT(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_EXCEPT
    @property
    def is_FALSE(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_FALSE
    @property
    def is_FILE(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_FILE
    @property
    def is_FINAL(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_FINAL
    @property
    def is_FINALLY(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_FINALLY
    @property
    def is_FLOAT(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_FLOAT
    @property
    def is_FOR(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_FOR
    @property
    def is_FOREVER(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_FOREVER
    @property
    def is_FROM(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_FROM
    @property
    def is_GE(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_GE
    @property
    def is_GT(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_GT
    @property
    def is_HASH(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_HASH
    @property
    def is_HIDDEN(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_HIDDEN
    @property
    def is_IDENT(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_IDENT
    @property
    def is_IF(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_IF
    @property
    def is_IMPORT(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_IMPORT
    @property
    def is_IN(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_IN
    @property
    def is_INCR(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_INCR
    @property
    def is_INTEGER(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_INTEGER
    @property
    def is_IS(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_IS
    @property
    def is_ISOF(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_ISOF
    @property
    def is_LANGUAGE(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_LANGUAGE
    @property
    def is_LE(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_LE
    @property
    def is_LIST(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_LIST
    @property
    def is_LT(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_LT
    @property
    def is_MAP(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_MAP
    @property
    def is_ME(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_ME
    @property
    def is_MINUS(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_MINUS
    @property
    def is_MOD(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_MOD
    @property
    def is_MUL(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_MUL
    @property
    def is_NE(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_NE
    @property
    def is_NL(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_NL
    @property
    def is_NONE(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_NONE
    @property
    def is_NOP(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_NOP
    @property
    def is_NOT(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_NOT
    @property
    def is_OPERATOR(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_OPERATOR
    @property
    def is_OP_2COLN(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_OP_2COLN
    @property
    def is_OP_2EXCL(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_OP_2EXCL
    @property
    def is_OP_2QUEST(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_OP_2QUEST
    @property
    def is_OP_GRLE(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_OP_GRLE
    @property
    def is_OR(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_OR
    @property
    def is_PARCL(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_PARCL
    @property
    def is_PAROP(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_PAROP
    @property
    def is_PLUS(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_PLUS
    @property
    def is_POST(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_POST
    @property
    def is_POWER(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_POWER
    @property
    def is_PRE(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_PRE
    @property
    def is_PROTECTED(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_PROTECTED
    @property
    def is_PUBLIC(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_PUBLIC
    @property
    def is_RAISE(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_RAISE
    @property
    def is_REPEAT(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_REPEAT
    @property
    def is_REQUIRE(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_REQUIRE
    @property
    def is_RETURN(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_RETURN
    @property
    def is_SCALAR_TYPE(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_SCALAR_TYPE
    @property
    def is_SEMICOLON(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_SEMICOLON
    @property
    def is_SET(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_SET
    @property
    def is_SHIFT0L(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_SHIFT0L
    @property
    def is_SHIFT0R(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_SHIFT0R
    @property
    def is_SHIFTL(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_SHIFTL
    @property
    def is_SHIFTR(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_SHIFTR
    @property
    def is_STATIC(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_STATIC
    @property
    def is_STRING(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_STRING
    @property
    def is_SWITCH(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_SWITCH
    @property
    def is_TILD(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_TILD
    @property
    def is_TRUE(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_TRUE
    @property
    def is_TRY(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_TRY
    @property
    def is_TYPE_ALIAS(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_TYPE_ALIAS
    @property
    def is_UNEXPECTED(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_UNEXPECTED
    @property
    def is_UNNAMED(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_UNNAMED
    @property
    def is_UNTIL(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_UNTIL
    @property
    def is_VOLATILE(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_VOLATILE
    @property
    def is_WHILE(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_WHILE
    @property
    def is_WITH(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_WITH


#=============================================================================
class FEICodeTokenNodeProtection( FEICodeTokenNode ):
    """
    The class of nodes describing protection modes for the Front End 
    Intermediate Code Token Nodes of the Typee Scanner.
    """
    #-------------------------------------------------------------------------
    def __init__(self, scanner, protection_mode:Access, tk_id:int, tk_data=None):
        '''
        Creates a node describing protection modes of Intermediate Code 
        Token Nodes for the Front-End Typee Scanner.
        
        Args:
            scanner: FEScanner
                A reference to the calling scanner.
            protection_mode: Access
                An enumerated value corresponding to the protection
                mode.
            tk_id: int
                The token identifier for this node.
            tk_data:
                The data related to this node. Defaults to None.
        '''
        super().__init__( scanner, tk_id, tk_data )
        self.tk_protection = protection_mode


#=============================================================================
class ICTokenNode_ABSTRACT( FEICodeTokenNode ):
    def __init__(self, scanner=None, data='abstract'):
        super().__init__( scanner, FEICodeTokens.TK_ABSTRACT, data )

class ICTokenNode_ALL( FEICodeTokenNode ):
    def __init__(self, scanner=None, data='all'):
        super().__init__( scanner, FEICodeTokens.TK_ALL, data )

class ICTokenNode_AND( FEICodeTokenNode ):
    def __init__(self, scanner=None, data='and'):
        super().__init__( scanner, FEICodeTokens.TK_AND, data )

class ICTokenNode_ANY_TYPE( FEICodeTokenNode ):
    def __init__(self, scanner=None, data='?'):
        super().__init__( scanner, FEICodeTokens.TK_ANY_TYPE, data )

class ICTokenNode_AROBASE( FEICodeTokenNode ):
    def __init__(self, scanner=None, data='@'):
        super().__init__( scanner, FEICodeTokens.TK_AROBASE, data )

class ICTokenNode_ARRAY( FEICodeTokenNode ):
    def __init__(self, scanner=None, data='array'):
        super().__init__( scanner, FEICodeTokens.TK_ARRAY, data )

class ICTokenNode_AS( FEICodeTokenNode ):
    def __init__(self, scanner=None, data='as'):
        super().__init__( scanner, FEICodeTokens.TK_AS, data )

class ICTokenNode_ASSERT( FEICodeTokenNode ):
    def __init__(self, scanner=None, data='assert'):
        super().__init__( scanner, FEICodeTokens.TK_ASSERT, data )

class ICTokenNode_ASSIGN( FEICodeTokenNode ):
    def __init__(self, scanner=None, data='='):
        super().__init__( scanner, FEICodeTokens.TK_ASSIGN, data )

class ICTokenNode_AUG_2COLN( FEICodeTokenNode ):
    def __init__(self, scanner=None, data='::='):
        super().__init__( scanner, FEICodeTokens.TK_AUG_2COLN, data )

class ICTokenNode_AUG_2EXCL( FEICodeTokenNode ):
    def __init__(self, scanner=None, data='!!='):
        super().__init__( scanner, FEICodeTokens.TK_AUG_2EXCL, data )

class ICTokenNode_AUG_2QUEST( FEICodeTokenNode ):
    def __init__(self, scanner=None, data='??='):
        super().__init__( scanner, FEICodeTokens.TK_AUG_2QUEST, data )

class ICTokenNode_AUG_AROBASE( FEICodeTokenNode ):
    def __init__(self, scanner=None, data='@='):
        super().__init__( scanner, FEICodeTokens.TK_AUG_AROBASE, data )

class ICTokenNode_AUG_BITAND( FEICodeTokenNode ):
    def __init__(self, scanner=None, data='&='):
        super().__init__( scanner, FEICodeTokens.TK_AUG_BITAND, data )

class ICTokenNode_AUG_BITOR( FEICodeTokenNode ):
    def __init__(self, scanner=None, data='|='):
        super().__init__( scanner, FEICodeTokens.TK_AUG_BITOR, data )

class ICTokenNode_AUG_BITXOR( FEICodeTokenNode ):
    def __init__(self, scanner=None, data='^='):
        super().__init__( scanner, FEICodeTokens.TK_AUG_BITXOR, data )

class ICTokenNode_AUG_DIV( FEICodeTokenNode ):
    def __init__(self, scanner=None, data='/='):
        super().__init__( scanner, FEICodeTokens.TK_AUG_DIV, data )

class ICTokenNode_AUG_GRLE( FEICodeTokenNode ):
    def __init__(self, scanner=None, data='><='):
        super().__init__( scanner, FEICodeTokens.TK_AUG_GRLE, data )

class ICTokenNode_AUG_MINUS( FEICodeTokenNode ):
    def __init__(self, scanner=None, data='-='):
        super().__init__( scanner, FEICodeTokens.TK_AUG_MINUS, data )

class ICTokenNode_AUG_MOD( FEICodeTokenNode ):
    def __init__(self, scanner=None, data='%='):
        super().__init__( scanner, FEICodeTokens.TK_AUG_MOD, data )

class ICTokenNode_AUG_MUL( FEICodeTokenNode ):
    def __init__(self, scanner=None, data='*='):
        super().__init__( scanner, FEICodeTokens.TK_AUG_MUL, data )

class ICTokenNode_AUG_PLUS( FEICodeTokenNode ):
    def __init__(self, scanner=None, data='+='):
        super().__init__( scanner, FEICodeTokens.TK_AUG_PLUS, data )

class ICTokenNode_AUG_POWER( FEICodeTokenNode ):
    def __init__(self, scanner=None, data='^^='):
        super().__init__( scanner, FEICodeTokens.TK_AUG_POWER, data )

class ICTokenNode_AUG_SHIFT0L( FEICodeTokenNode ):
    def __init__(self, scanner=None, data='<<<='):
        super().__init__( scanner, FEICodeTokens.TK_AUG_SHIFT0L, data )

class ICTokenNode_AUG_SHIFT0R( FEICodeTokenNode ):
    def __init__(self, scanner=None, data='>>>='):
        super().__init__( scanner, FEICodeTokens.TK_AUG_SHIFT0R, data )

class ICTokenNode_AUG_SHIFTL( FEICodeTokenNode ):
    def __init__(self, scanner=None, data='<<='):
        super().__init__( scanner, FEICodeTokens.TK_AUG_SHIFTL, data )

class ICTokenNode_AUG_SHIFTR( FEICodeTokenNode ):
    def __init__(self, scanner=None, data='>>='):
        super().__init__( scanner, FEICodeTokens.TK_AUG_SHIFTR, data )

class ICTokenNode_BITAND( FEICodeTokenNode ):
    def __init__(self, scanner=None, data='&'):
        super().__init__( scanner, FEICodeTokens.TK_BITAND, data )

class ICTokenNode_BITOR( FEICodeTokenNode ):
    def __init__(self, scanner=None, data='|'):
        super().__init__( scanner, FEICodeTokens.TK_BITOR, data )

class ICTokenNode_BITXOR( FEICodeTokenNode ):
    def __init__(self, scanner=None, data='^'):
        super().__init__( scanner, FEICodeTokens.TK_BITXOR, data )

class ICTokenNode_BRACECL( FEICodeTokenNode ):
    def __init__(self, scanner=None, data='}'):
        super().__init__( scanner, FEICodeTokens.TK_BRACECL, data )

class ICTokenNode_BRACEOP( FEICodeTokenNode ):
    def __init__(self, scanner=None, data='{'):
        super().__init__( scanner, FEICodeTokens.TK_BRACEOP, data )

class ICTokenNode_BRACKETCL( FEICodeTokenNode ):
    def __init__(self, scanner=None, data=']'):
        super().__init__( scanner, FEICodeTokens.TK_BRACKETCL, data )

class ICTokenNode_BRACKETOP( FEICodeTokenNode ):
    def __init__(self, scanner=None, data='['):
        super().__init__( scanner, FEICodeTokens.TK_BRACKETOP, data )

class ICTokenNode_BREAK( FEICodeTokenNode ):
    def __init__(self, scanner=None, data='break'):
        super().__init__( scanner, FEICodeTokens.TK_BREAK, data )

class ICTokenNode_CASE( FEICodeTokenNode ):
    def __init__(self, scanner=None, data='case'):
        super().__init__( scanner, FEICodeTokens.TK_CASE, data )

class ICTokenNode_CAST( FEICodeTokenNode ):
    def __init__(self, scanner=None, data='cast'):
        super().__init__( scanner, FEICodeTokens.TK_CAST, data )

class ICTokenNode_CLASS( FEICodeTokenNode ):
    def __init__(self, scanner=None, data='class'):
        super().__init__( scanner, FEICodeTokens.TK_CLASS, data )

class ICTokenNode_COLON( FEICodeTokenNode ):
    def __init__(self, scanner=None, data=':'):
        super().__init__( scanner, FEICodeTokens.TK_COLON, data )

class ICTokenNode_COMMA( FEICodeTokenNode ):
    def __init__(self, scanner=None, data=','):
        super().__init__( scanner, FEICodeTokens.TK_COMMA, data )

class ICTokenNode_COMMENT( FEICodeTokenNode ):
    def __init__(self, scanner=None, data='None'):
        super().__init__( scanner, FEICodeTokens.TK_COMMENT, data )

class ICTokenNode_COMMENT_ML( FEICodeTokenNode ):
    def __init__(self, scanner=None, data='None'):
        super().__init__( scanner, FEICodeTokens.TK_COMMENT_ML, data )

class ICTokenNode_CONST( FEICodeTokenNode ):
    def __init__(self, scanner=None, data='const'):
        super().__init__( scanner, FEICodeTokens.TK_CONST, data )

class ICTokenNode_CONTINUE( FEICodeTokenNode ):
    def __init__(self, scanner=None, data='continue'):
        super().__init__( scanner, FEICodeTokens.TK_CONTINUE, data )

class ICTokenNode_DECR( FEICodeTokenNode ):
    def __init__(self, scanner=None, data='--'):
        super().__init__( scanner, FEICodeTokens.TK_DECR, data )

class ICTokenNode_DEL( FEICodeTokenNode ):
    def __init__(self, scanner=None, data='del'):
        super().__init__( scanner, FEICodeTokens.TK_DEL, data )

class ICTokenNode_DIV( FEICodeTokenNode ):
    def __init__(self, scanner=None, data='/'):
        super().__init__( scanner, FEICodeTokens.TK_DIV, data )

class ICTokenNode_DOT( FEICodeTokenNode ):
    def __init__(self, scanner=None, data='.'):
        super().__init__( scanner, FEICodeTokens.TK_DOT, data )

class ICTokenNode_ELIF( FEICodeTokenNode ):
    def __init__(self, scanner=None, data='elif'):
        super().__init__( scanner, FEICodeTokens.TK_ELIF, data )

class ICTokenNode_ELLIPSIS( FEICodeTokenNode ):
    def __init__(self, scanner=None, data='...'):
        super().__init__( scanner, FEICodeTokens.TK_ELLIPSIS, data )

class ICTokenNode_ELSE( FEICodeTokenNode ):
    def __init__(self, scanner=None, data='else'):
        super().__init__( scanner, FEICodeTokens.TK_ELSE, data )

class ICTokenNode_EMBED( FEICodeTokenNode ):
    def __init__(self, scanner=None, data='embed'):
        super().__init__( scanner, FEICodeTokens.TK_EMBED, data )

class ICTokenNode_EMBED_CODE( FEICodeTokenNode ):
    def __init__(self, scanner=None, data='None'):
        super().__init__( scanner, FEICodeTokens.TK_EMBED_CODE, data )

class ICTokenNode_ENSURE( FEICodeTokenNode ):
    def __init__(self, scanner=None, data='ensure'):
        super().__init__( scanner, FEICodeTokens.TK_ENSURE, data )

class ICTokenNode_ENUM( FEICodeTokenNode ):
    def __init__(self, scanner=None, data='enum'):
        super().__init__( scanner, FEICodeTokens.TK_ENUM, data )

class ICTokenNode_EOF( FEICodeTokenNode ):
    def __init__(self, scanner=None, data='None'):
        super().__init__( scanner, FEICodeTokens.TK_EOF, data )

class ICTokenNode_EQ( FEICodeTokenNode ):
    def __init__(self, scanner=None, data='=='):
        super().__init__( scanner, FEICodeTokens.TK_EQ, data )

class ICTokenNode_EXCEPT( FEICodeTokenNode ):
    def __init__(self, scanner=None, data='except'):
        super().__init__( scanner, FEICodeTokens.TK_EXCEPT, data )

class ICTokenNode_FALSE( FEICodeTokenNode ):
    def __init__(self, scanner=None, data='false'):
        super().__init__( scanner, FEICodeTokens.TK_FALSE, data )

class ICTokenNode_FILE( FEICodeTokenNode ):
    def __init__(self, scanner=None, data='file'):
        super().__init__( scanner, FEICodeTokens.TK_FILE, data )

class ICTokenNode_FINAL( FEICodeTokenNode ):
    def __init__(self, scanner=None, data='final'):
        super().__init__( scanner, FEICodeTokens.TK_FINAL, data )

class ICTokenNode_FINALLY( FEICodeTokenNode ):
    def __init__(self, scanner=None, data='finally'):
        super().__init__( scanner, FEICodeTokens.TK_FINALLY, data )

class ICTokenNode_FLOAT( FEICodeTokenNode ):
    def __init__(self, scanner=None, data='None'):
        super().__init__( scanner, FEICodeTokens.TK_FLOAT, data )

class ICTokenNode_FOR( FEICodeTokenNode ):
    def __init__(self, scanner=None, data='for'):
        super().__init__( scanner, FEICodeTokens.TK_FOR, data )

class ICTokenNode_FOREVER( FEICodeTokenNode ):
    def __init__(self, scanner=None, data='forever'):
        super().__init__( scanner, FEICodeTokens.TK_FOREVER, data )

class ICTokenNode_FROM( FEICodeTokenNode ):
    def __init__(self, scanner=None, data='from'):
        super().__init__( scanner, FEICodeTokens.TK_FROM, data )

class ICTokenNode_GE( FEICodeTokenNode ):
    def __init__(self, scanner=None, data='>='):
        super().__init__( scanner, FEICodeTokens.TK_GE, data )

class ICTokenNode_GT( FEICodeTokenNode ):
    def __init__(self, scanner=None, data='>'):
        super().__init__( scanner, FEICodeTokens.TK_GT, data )

class ICTokenNode_HASH( FEICodeTokenNode ):
    def __init__(self, scanner=None, data='#'):
        super().__init__( scanner, FEICodeTokens.TK_HASH, data )

class ICTokenNode_HIDDEN( FEICodeTokenNodeProtection ):
    def __init__(self, scanner=None, data='hidden'):
            super().__init__( scanner, Access.HIDDEN, FEICodeTokens.TK_HIDDEN, data )

class ICTokenNode_IDENT( FEICodeTokenNode ):
    def __init__(self, scanner=None, data='None'):
        super().__init__( scanner, FEICodeTokens.TK_IDENT, data )

class ICTokenNode_IF( FEICodeTokenNode ):
    def __init__(self, scanner=None, data='if'):
        super().__init__( scanner, FEICodeTokens.TK_IF, data )

class ICTokenNode_IMPORT( FEICodeTokenNode ):
    def __init__(self, scanner=None, data='import'):
        super().__init__( scanner, FEICodeTokens.TK_IMPORT, data )

class ICTokenNode_IN( FEICodeTokenNode ):
    def __init__(self, scanner=None, data='in'):
        super().__init__( scanner, FEICodeTokens.TK_IN, data )

class ICTokenNode_INCR( FEICodeTokenNode ):
    def __init__(self, scanner=None, data='++'):
        super().__init__( scanner, FEICodeTokens.TK_INCR, data )

class ICTokenNode_INTEGER( FEICodeTokenNode ):
    def __init__(self, scanner=None, data='None'):
        super().__init__( scanner, FEICodeTokens.TK_INTEGER, data )

class ICTokenNode_IS( FEICodeTokenNode ):
    def __init__(self, scanner=None, data='is'):
        super().__init__( scanner, FEICodeTokens.TK_IS, data )

class ICTokenNode_ISOF( FEICodeTokenNode ):
    def __init__(self, scanner=None, data='->'):
        super().__init__( scanner, FEICodeTokens.TK_ISOF, data )

class ICTokenNode_LANGUAGE( FEICodeTokenNode ):
    def __init__(self, scanner=None, data='language'):
        super().__init__( scanner, FEICodeTokens.TK_LANGUAGE, data )

class ICTokenNode_LE( FEICodeTokenNode ):
    def __init__(self, scanner=None, data='<='):
        super().__init__( scanner, FEICodeTokens.TK_LE, data )

class ICTokenNode_LIST( FEICodeTokenNode ):
    def __init__(self, scanner=None, data='list'):
        super().__init__( scanner, FEICodeTokens.TK_LIST, data )

class ICTokenNode_LT( FEICodeTokenNode ):
    def __init__(self, scanner=None, data='<'):
        super().__init__( scanner, FEICodeTokens.TK_LT, data )

class ICTokenNode_MAP( FEICodeTokenNode ):
    def __init__(self, scanner=None, data='map'):
        super().__init__( scanner, FEICodeTokens.TK_MAP, data )

class ICTokenNode_ME( FEICodeTokenNode ):
    def __init__(self, scanner=None, data='me'):
        super().__init__( scanner, FEICodeTokens.TK_ME, data )

class ICTokenNode_MINUS( FEICodeTokenNode ):
    def __init__(self, scanner=None, data='-'):
        super().__init__( scanner, FEICodeTokens.TK_MINUS, data )

class ICTokenNode_MOD( FEICodeTokenNode ):
    def __init__(self, scanner=None, data='%'):
        super().__init__( scanner, FEICodeTokens.TK_MOD, data )

class ICTokenNode_MUL( FEICodeTokenNode ):
    def __init__(self, scanner=None, data='*'):
        super().__init__( scanner, FEICodeTokens.TK_MUL, data )

class ICTokenNode_NE( FEICodeTokenNode ):
    def __init__(self, scanner=None, data='!='):
        super().__init__( scanner, FEICodeTokens.TK_NE, data )

class ICTokenNode_NL( FEICodeTokenNode ):
    def __init__(self, scanner=None, data='new line'):
        super().__init__( scanner, FEICodeTokens.TK_NL, data )

class ICTokenNode_NONE( FEICodeTokenNode ):
    def __init__(self, scanner=None, data='none'):
        super().__init__( scanner, FEICodeTokens.TK_NONE, data )

class ICTokenNode_NOP( FEICodeTokenNode ):
    def __init__(self, scanner=None, data='nop'):
        super().__init__( scanner, FEICodeTokens.TK_NOP, data )

class ICTokenNode_NOT( FEICodeTokenNode ):
    def __init__(self, scanner=None, data='not'):
        super().__init__( scanner, FEICodeTokens.TK_NOT, data )

class ICTokenNode_OPERATOR( FEICodeTokenNode ):
    def __init__(self, scanner=None, data='operator'):
        super().__init__( scanner, FEICodeTokens.TK_OPERATOR, data )

class ICTokenNode_OP_2COLN( FEICodeTokenNode ):
    def __init__(self, scanner=None, data='::'):
        super().__init__( scanner, FEICodeTokens.TK_OP_2COLN, data )

class ICTokenNode_OP_2EXCL( FEICodeTokenNode ):
    def __init__(self, scanner=None, data='!!'):
        super().__init__( scanner, FEICodeTokens.TK_OP_2EXCL, data )

class ICTokenNode_OP_2QUEST( FEICodeTokenNode ):
    def __init__(self, scanner=None, data='??'):
        super().__init__( scanner, FEICodeTokens.TK_OP_2QUEST, data )

class ICTokenNode_OP_GRLE( FEICodeTokenNode ):
    def __init__(self, scanner=None, data='><'):
        super().__init__( scanner, FEICodeTokens.TK_OP_GRLE, data )

class ICTokenNode_OR( FEICodeTokenNode ):
    def __init__(self, scanner=None, data='or'):
        super().__init__( scanner, FEICodeTokens.TK_OR, data )

class ICTokenNode_PARCL( FEICodeTokenNode ):
    def __init__(self, scanner=None, data=')'):
        super().__init__( scanner, FEICodeTokens.TK_PARCL, data )

class ICTokenNode_PAROP( FEICodeTokenNode ):
    def __init__(self, scanner=None, data='('):
        super().__init__( scanner, FEICodeTokens.TK_PAROP, data )

class ICTokenNode_PLUS( FEICodeTokenNode ):
    def __init__(self, scanner=None, data='+'):
        super().__init__( scanner, FEICodeTokens.TK_PLUS, data )

class ICTokenNode_POST( FEICodeTokenNode ):
    def __init__(self, scanner=None, data='post'):
        super().__init__( scanner, FEICodeTokens.TK_POST, data )

class ICTokenNode_POWER( FEICodeTokenNode ):
    def __init__(self, scanner=None, data='^^'):
        super().__init__( scanner, FEICodeTokens.TK_POWER, data )

class ICTokenNode_PRE( FEICodeTokenNode ):
    def __init__(self, scanner=None, data='pre'):
        super().__init__( scanner, FEICodeTokens.TK_PRE, data )

class ICTokenNode_PROTECTED( FEICodeTokenNodeProtection ):
    def __init__(self, scanner=None, data='protected'):
            super().__init__( scanner, Access.PROTECTED, FEICodeTokens.TK_PROTECTED, data )

class ICTokenNode_PUBLIC( FEICodeTokenNodeProtection ):
    def __init__(self, scanner=None, data='public'):
            super().__init__( scanner, Access.PUBLIC, FEICodeTokens.TK_PUBLIC, data )

class ICTokenNode_RAISE( FEICodeTokenNode ):
    def __init__(self, scanner=None, data='raise'):
        super().__init__( scanner, FEICodeTokens.TK_RAISE, data )

class ICTokenNode_REPEAT( FEICodeTokenNode ):
    def __init__(self, scanner=None, data='repeat'):
        super().__init__( scanner, FEICodeTokens.TK_REPEAT, data )

class ICTokenNode_REQUIRE( FEICodeTokenNode ):
    def __init__(self, scanner=None, data='require'):
        super().__init__( scanner, FEICodeTokens.TK_REQUIRE, data )

class ICTokenNode_RETURN( FEICodeTokenNode ):
    def __init__(self, scanner=None, data='return'):
        super().__init__( scanner, FEICodeTokens.TK_RETURN, data )

class ICTokenNode_SCALAR_TYPE( FEICodeTokenNode ):
    def __init__(self, scanner=None, data='None'):
        super().__init__( scanner, FEICodeTokens.TK_SCALAR_TYPE, data )

class ICTokenNode_SEMICOLON( FEICodeTokenNode ):
    def __init__(self, scanner=None, data=';'):
        super().__init__( scanner, FEICodeTokens.TK_SEMICOLON, data )

class ICTokenNode_SET( FEICodeTokenNode ):
    def __init__(self, scanner=None, data='set'):
        super().__init__( scanner, FEICodeTokens.TK_SET, data )

class ICTokenNode_SHIFT0L( FEICodeTokenNode ):
    def __init__(self, scanner=None, data='<<<'):
        super().__init__( scanner, FEICodeTokens.TK_SHIFT0L, data )

class ICTokenNode_SHIFT0R( FEICodeTokenNode ):
    def __init__(self, scanner=None, data='>>>'):
        super().__init__( scanner, FEICodeTokens.TK_SHIFT0R, data )

class ICTokenNode_SHIFTL( FEICodeTokenNode ):
    def __init__(self, scanner=None, data='<<'):
        super().__init__( scanner, FEICodeTokens.TK_SHIFTL, data )

class ICTokenNode_SHIFTR( FEICodeTokenNode ):
    def __init__(self, scanner=None, data='>>'):
        super().__init__( scanner, FEICodeTokens.TK_SHIFTR, data )

class ICTokenNode_STATIC( FEICodeTokenNode ):
    def __init__(self, scanner=None, data='static'):
        super().__init__( scanner, FEICodeTokens.TK_STATIC, data )

class ICTokenNode_STRING( FEICodeTokenNode ):
    def __init__(self, scanner=None, data='None'):
        super().__init__( scanner, FEICodeTokens.TK_STRING, data )

class ICTokenNode_SWITCH( FEICodeTokenNode ):
    def __init__(self, scanner=None, data='switch'):
        super().__init__( scanner, FEICodeTokens.TK_SWITCH, data )

class ICTokenNode_TILD( FEICodeTokenNode ):
    def __init__(self, scanner=None, data='~'):
        super().__init__( scanner, FEICodeTokens.TK_TILD, data )

class ICTokenNode_TRUE( FEICodeTokenNode ):
    def __init__(self, scanner=None, data='true'):
        super().__init__( scanner, FEICodeTokens.TK_TRUE, data )

class ICTokenNode_TRY( FEICodeTokenNode ):
    def __init__(self, scanner=None, data='try'):
        super().__init__( scanner, FEICodeTokens.TK_TRY, data )

class ICTokenNode_TYPE_ALIAS( FEICodeTokenNode ):
    def __init__(self, scanner=None, data='type'):
        super().__init__( scanner, FEICodeTokens.TK_TYPE_ALIAS, data )

class ICTokenNode_UNEXPECTED( FEICodeTokenNode ):
    def __init__(self, scanner=None, data='None'):
        super().__init__( scanner, FEICodeTokens.TK_UNEXPECTED, data )

class ICTokenNode_UNNAMED( FEICodeTokenNode ):
    def __init__(self, scanner=None, data='unnamed'):
        super().__init__( scanner, FEICodeTokens.TK_UNNAMED, data )

class ICTokenNode_UNTIL( FEICodeTokenNode ):
    def __init__(self, scanner=None, data='until'):
        super().__init__( scanner, FEICodeTokens.TK_UNTIL, data )

class ICTokenNode_VOLATILE( FEICodeTokenNode ):
    def __init__(self, scanner=None, data='volatile'):
        super().__init__( scanner, FEICodeTokens.TK_VOLATILE, data )

class ICTokenNode_WHILE( FEICodeTokenNode ):
    def __init__(self, scanner=None, data='while'):
        super().__init__( scanner, FEICodeTokens.TK_WHILE, data )

class ICTokenNode_WITH( FEICodeTokenNode ):
    def __init__(self, scanner=None, data='with'):
        super().__init__( scanner, FEICodeTokens.TK_WITH, data )

#=====   end of   FrontEnd.IntermediateCode.fe_icode_token_node   =====#
