#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
Copyright (c) 2018 Philippe Schmouker, Typee project, http://www.typee.ovh

Permission is hereby granted,  free of charge,  to any person obtaining a copy
of this software and associated documentation files (the "Software"),  to deal
in the Software without restriction, including  without  limitation the rights
to use,  copy,  modify,  merge,  publish,  distribute, sublicense, and/or sell
copies of the Software,  and  to  permit  persons  to  whom  the  Software  is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS",  WITHOUT WARRANTY OF ANY  KIND,  EXPRESS  OR
IMPLIED,  INCLUDING  BUT  NOT  LIMITED  TO  THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT  SHALL  THE
AUTHORS  OR  COPYRIGHT  HOLDERS  BE  LIABLE  FOR  ANY CLAIM,  DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT,  TORT OR OTHERWISE, ARISING FROM,
OUT  OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
"""

#=============================================================================
## THIS FILE HAS BEEN AUTOMATICALLY GENERATED BY Typee FRAMEWORK.
## DO NOT MODIFY IT: ANY MODIFICATION WOULD BE LOST ON NEXT USE.


#=============================================================================
from Commons.access                             import Access
from FrontEnd.IntermediateCode.fe_icode_tokens  import FEICodeTokens


#=============================================================================
class FEICodeNode:
    """
    The class of nodes for the Front End Intermediate Code of the Typhon Scanner.
    """    
    #-------------------------------------------------------------------------
    def __init__(self, scanner, tk_id:int, tk_data=None):
        '''
        Creates a node of Intermediate Code for the Front-End Typhon Scanner.
        
        Args:
            tk_id: int
                The token identifier for this node.
            tk_data:
                The data related to this node. Defaults to None.
            scanner: FEScanner
                A reference to the calling scanner.
        '''
        self.num_line = scanner.num_line if scanner else 0
        self.num_coln = scanner.num_coln if scanner else 0
        self.tk_data  = tk_data
        self.tk_ident = tk_id

    #-------------------------------------------------------------------------
    def __eq__(self, other):
        return self.tk_ident == other.tk_ident  and  self.tk_data == other.tk_data
    #-------------------------------------------------------------------------
    @property
    def is_ABSTRACT(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_ABSTRACT
    @property
    def is_ALL(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_ALL
    @property
    def is_AND(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_AND
    @property
    def is_ANY_TYPE(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_ANY_TYPE
    @property
    def is_AROBASE(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_AROBASE
    @property
    def is_ARRAY(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_ARRAY
    @property
    def is_AS(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_AS
    @property
    def is_ASSERT(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_ASSERT
    @property
    def is_ASSIGN(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_ASSIGN
    @property
    def is_AUG_2COLN(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_AUG_2COLN
    @property
    def is_AUG_2EXCL(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_AUG_2EXCL
    @property
    def is_AUG_2QUEST(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_AUG_2QUEST
    @property
    def is_AUG_AROBASE(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_AUG_AROBASE
    @property
    def is_AUG_BITAND(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_AUG_BITAND
    @property
    def is_AUG_BITOR(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_AUG_BITOR
    @property
    def is_AUG_BITXOR(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_AUG_BITXOR
    @property
    def is_AUG_DIV(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_AUG_DIV
    @property
    def is_AUG_GRLE(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_AUG_GRLE
    @property
    def is_AUG_MINUS(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_AUG_MINUS
    @property
    def is_AUG_MOD(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_AUG_MOD
    @property
    def is_AUG_MUL(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_AUG_MUL
    @property
    def is_AUG_PLUS(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_AUG_PLUS
    @property
    def is_AUG_POWER(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_AUG_POWER
    @property
    def is_AUG_SHIFT0L(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_AUG_SHIFT0L
    @property
    def is_AUG_SHIFT0R(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_AUG_SHIFT0R
    @property
    def is_AUG_SHIFTL(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_AUG_SHIFTL
    @property
    def is_AUG_SHIFTR(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_AUG_SHIFTR
    @property
    def is_BITAND(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_BITAND
    @property
    def is_BITOR(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_BITOR
    @property
    def is_BITXOR(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_BITXOR
    @property
    def is_BRACECL(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_BRACECL
    @property
    def is_BRACEOP(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_BRACEOP
    @property
    def is_BRACKETCL(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_BRACKETCL
    @property
    def is_BRACKETOP(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_BRACKETOP
    @property
    def is_BREAK(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_BREAK
    @property
    def is_CASE(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_CASE
    @property
    def is_CAST(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_CAST
    @property
    def is_CLASS(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_CLASS
    @property
    def is_COLON(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_COLON
    @property
    def is_COMMA(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_COMMA
    @property
    def is_COMMENT(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_COMMENT
    @property
    def is_COMMENT_ML(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_COMMENT_ML
    @property
    def is_CONST(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_CONST
    @property
    def is_CONTINUE(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_CONTINUE
    @property
    def is_DECR(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_DECR
    @property
    def is_DEL(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_DEL
    @property
    def is_DIV(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_DIV
    @property
    def is_DOT(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_DOT
    @property
    def is_ELIF(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_ELIF
    @property
    def is_ELLIPSIS(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_ELLIPSIS
    @property
    def is_ELSE(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_ELSE
    @property
    def is_EMBED(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_EMBED
    @property
    def is_EMBED_CODE(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_EMBED_CODE
    @property
    def is_ENSURE(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_ENSURE
    @property
    def is_ENUM(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_ENUM
    @property
    def is_EOF(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_EOF
    @property
    def is_EQ(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_EQ
    @property
    def is_EXCEPT(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_EXCEPT
    @property
    def is_FALSE(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_FALSE
    @property
    def is_FILE(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_FILE
    @property
    def is_FINAL(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_FINAL
    @property
    def is_FINALLY(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_FINALLY
    @property
    def is_FLOAT(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_FLOAT
    @property
    def is_FOR(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_FOR
    @property
    def is_FOREVER(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_FOREVER
    @property
    def is_FROM(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_FROM
    @property
    def is_GE(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_GE
    @property
    def is_GT(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_GT
    @property
    def is_HASH(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_HASH
    @property
    def is_HIDDEN(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_HIDDEN
    @property
    def is_IDENT(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_IDENT
    @property
    def is_IF(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_IF
    @property
    def is_IMPORT(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_IMPORT
    @property
    def is_IN(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_IN
    @property
    def is_INCR(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_INCR
    @property
    def is_INTEGER(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_INTEGER
    @property
    def is_IS(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_IS
    @property
    def is_ISOF(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_ISOF
    @property
    def is_LANGUAGE(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_LANGUAGE
    @property
    def is_LE(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_LE
    @property
    def is_LIST(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_LIST
    @property
    def is_LT(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_LT
    @property
    def is_MAP(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_MAP
    @property
    def is_ME(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_ME
    @property
    def is_MINUS(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_MINUS
    @property
    def is_MOD(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_MOD
    @property
    def is_MUL(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_MUL
    @property
    def is_NE(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_NE
    @property
    def is_NL(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_NL
    @property
    def is_NONE(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_NONE
    @property
    def is_NOP(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_NOP
    @property
    def is_NOT(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_NOT
    @property
    def is_OPERATOR(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_OPERATOR
    @property
    def is_OP_2COLN(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_OP_2COLN
    @property
    def is_OP_2EXCL(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_OP_2EXCL
    @property
    def is_OP_2QUEST(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_OP_2QUEST
    @property
    def is_OP_GRLE(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_OP_GRLE
    @property
    def is_OR(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_OR
    @property
    def is_PARCL(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_PARCL
    @property
    def is_PAROP(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_PAROP
    @property
    def is_PLUS(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_PLUS
    @property
    def is_POWER(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_POWER
    @property
    def is_PROTECTED(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_PROTECTED
    @property
    def is_PUBLIC(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_PUBLIC
    @property
    def is_RAISE(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_RAISE
    @property
    def is_REPEAT(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_REPEAT
    @property
    def is_REQUIRE(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_REQUIRE
    @property
    def is_RETURN(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_RETURN
    @property
    def is_SCALAR_TYPE(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_SCALAR_TYPE
    @property
    def is_SEMICOLON(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_SEMICOLON
    @property
    def is_SET(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_SET
    @property
    def is_SHIFT0L(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_SHIFT0L
    @property
    def is_SHIFT0R(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_SHIFT0R
    @property
    def is_SHIFTL(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_SHIFTL
    @property
    def is_SHIFTR(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_SHIFTR
    @property
    def is_STATIC(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_STATIC
    @property
    def is_STRING(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_STRING
    @property
    def is_SWITCH(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_SWITCH
    @property
    def is_TILD(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_TILD
    @property
    def is_TRUE(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_TRUE
    @property
    def is_TRY(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_TRY
    @property
    def is_TYPE_ALIAS(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_TYPE_ALIAS
    @property
    def is_UNEXPECTED(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_UNEXPECTED
    @property
    def is_UNNAMED(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_UNNAMED
    @property
    def is_UNTIL(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_UNTIL
    @property
    def is_VOLATILE(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_VOLATILE
    @property
    def is_WHILE(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_WHILE
    @property
    def is_WITH(self) -> bool:
        return self.tk_ident == FEICodeTokens.TK_WITH


#=============================================================================
class FEICodeNodeProtection( FEICodeNode ):
    """
    The class of nodes describing protection modes for the Front End 
    Intermediate Code of the Typhon Scanner.
    """
    #-------------------------------------------------------------------------
    def __init__(self, scanner, protection_mode:Access, tk_id:int, tk_data=None):
        '''
        Creates a node describing protection modes of Intermediate Code 
        for the Front-End Typhon Scanner.
        
        Args:
            scanner: FEScanner
                A reference to the calling scanner.
            protection_mode: Access
                An enumerated value corresponding to the protection
                mode.
            tk_id: int
                The token identifier for this node.
            tk_data:
                The data related to this node. Defaults to None.
        '''
        super().__init__( scanner, tk_id, tk_data )
        self.protection = protection_mode


#=============================================================================
class ICNode_ABSTRACT( FEICodeNode ):
    def __init__(self, scanner=None, data='abstract'):
        super().__init__( scanner, FEICodeTokens.TK_ABSTRACT, data )

class ICNode_ALL( FEICodeNode ):
    def __init__(self, scanner=None, data='all'):
        super().__init__( scanner, FEICodeTokens.TK_ALL, data )

class ICNode_AND( FEICodeNode ):
    def __init__(self, scanner=None, data='and'):
        super().__init__( scanner, FEICodeTokens.TK_AND, data )

class ICNode_ANY_TYPE( FEICodeNode ):
    def __init__(self, scanner=None, data='?'):
        super().__init__( scanner, FEICodeTokens.TK_ANY_TYPE, data )

class ICNode_AROBASE( FEICodeNode ):
    def __init__(self, scanner=None, data='@'):
        super().__init__( scanner, FEICodeTokens.TK_AROBASE, data )

class ICNode_ARRAY( FEICodeNode ):
    def __init__(self, scanner=None, data='array'):
        super().__init__( scanner, FEICodeTokens.TK_ARRAY, data )

class ICNode_AS( FEICodeNode ):
    def __init__(self, scanner=None, data='as'):
        super().__init__( scanner, FEICodeTokens.TK_AS, data )

class ICNode_ASSERT( FEICodeNode ):
    def __init__(self, scanner=None, data='assert'):
        super().__init__( scanner, FEICodeTokens.TK_ASSERT, data )

class ICNode_ASSIGN( FEICodeNode ):
    def __init__(self, scanner=None, data='='):
        super().__init__( scanner, FEICodeTokens.TK_ASSIGN, data )

class ICNode_AUG_2COLN( FEICodeNode ):
    def __init__(self, scanner=None, data='::='):
        super().__init__( scanner, FEICodeTokens.TK_AUG_2COLN, data )

class ICNode_AUG_2EXCL( FEICodeNode ):
    def __init__(self, scanner=None, data='!!='):
        super().__init__( scanner, FEICodeTokens.TK_AUG_2EXCL, data )

class ICNode_AUG_2QUEST( FEICodeNode ):
    def __init__(self, scanner=None, data='??='):
        super().__init__( scanner, FEICodeTokens.TK_AUG_2QUEST, data )

class ICNode_AUG_AROBASE( FEICodeNode ):
    def __init__(self, scanner=None, data='@='):
        super().__init__( scanner, FEICodeTokens.TK_AUG_AROBASE, data )

class ICNode_AUG_BITAND( FEICodeNode ):
    def __init__(self, scanner=None, data='&='):
        super().__init__( scanner, FEICodeTokens.TK_AUG_BITAND, data )

class ICNode_AUG_BITOR( FEICodeNode ):
    def __init__(self, scanner=None, data='|='):
        super().__init__( scanner, FEICodeTokens.TK_AUG_BITOR, data )

class ICNode_AUG_BITXOR( FEICodeNode ):
    def __init__(self, scanner=None, data='^='):
        super().__init__( scanner, FEICodeTokens.TK_AUG_BITXOR, data )

class ICNode_AUG_DIV( FEICodeNode ):
    def __init__(self, scanner=None, data='/='):
        super().__init__( scanner, FEICodeTokens.TK_AUG_DIV, data )

class ICNode_AUG_GRLE( FEICodeNode ):
    def __init__(self, scanner=None, data='><='):
        super().__init__( scanner, FEICodeTokens.TK_AUG_GRLE, data )

class ICNode_AUG_MINUS( FEICodeNode ):
    def __init__(self, scanner=None, data='-='):
        super().__init__( scanner, FEICodeTokens.TK_AUG_MINUS, data )

class ICNode_AUG_MOD( FEICodeNode ):
    def __init__(self, scanner=None, data='%='):
        super().__init__( scanner, FEICodeTokens.TK_AUG_MOD, data )

class ICNode_AUG_MUL( FEICodeNode ):
    def __init__(self, scanner=None, data='*='):
        super().__init__( scanner, FEICodeTokens.TK_AUG_MUL, data )

class ICNode_AUG_PLUS( FEICodeNode ):
    def __init__(self, scanner=None, data='+='):
        super().__init__( scanner, FEICodeTokens.TK_AUG_PLUS, data )

class ICNode_AUG_POWER( FEICodeNode ):
    def __init__(self, scanner=None, data='^^='):
        super().__init__( scanner, FEICodeTokens.TK_AUG_POWER, data )

class ICNode_AUG_SHIFT0L( FEICodeNode ):
    def __init__(self, scanner=None, data='<<<='):
        super().__init__( scanner, FEICodeTokens.TK_AUG_SHIFT0L, data )

class ICNode_AUG_SHIFT0R( FEICodeNode ):
    def __init__(self, scanner=None, data='>>>='):
        super().__init__( scanner, FEICodeTokens.TK_AUG_SHIFT0R, data )

class ICNode_AUG_SHIFTL( FEICodeNode ):
    def __init__(self, scanner=None, data='<<='):
        super().__init__( scanner, FEICodeTokens.TK_AUG_SHIFTL, data )

class ICNode_AUG_SHIFTR( FEICodeNode ):
    def __init__(self, scanner=None, data='>>='):
        super().__init__( scanner, FEICodeTokens.TK_AUG_SHIFTR, data )

class ICNode_BITAND( FEICodeNode ):
    def __init__(self, scanner=None, data='&'):
        super().__init__( scanner, FEICodeTokens.TK_BITAND, data )

class ICNode_BITOR( FEICodeNode ):
    def __init__(self, scanner=None, data='|'):
        super().__init__( scanner, FEICodeTokens.TK_BITOR, data )

class ICNode_BITXOR( FEICodeNode ):
    def __init__(self, scanner=None, data='^'):
        super().__init__( scanner, FEICodeTokens.TK_BITXOR, data )

class ICNode_BRACECL( FEICodeNode ):
    def __init__(self, scanner=None, data='}'):
        super().__init__( scanner, FEICodeTokens.TK_BRACECL, data )

class ICNode_BRACEOP( FEICodeNode ):
    def __init__(self, scanner=None, data='{'):
        super().__init__( scanner, FEICodeTokens.TK_BRACEOP, data )

class ICNode_BRACKETCL( FEICodeNode ):
    def __init__(self, scanner=None, data=']'):
        super().__init__( scanner, FEICodeTokens.TK_BRACKETCL, data )

class ICNode_BRACKETOP( FEICodeNode ):
    def __init__(self, scanner=None, data='['):
        super().__init__( scanner, FEICodeTokens.TK_BRACKETOP, data )

class ICNode_BREAK( FEICodeNode ):
    def __init__(self, scanner=None, data='break'):
        super().__init__( scanner, FEICodeTokens.TK_BREAK, data )

class ICNode_CASE( FEICodeNode ):
    def __init__(self, scanner=None, data='case'):
        super().__init__( scanner, FEICodeTokens.TK_CASE, data )

class ICNode_CAST( FEICodeNode ):
    def __init__(self, scanner=None, data='cast'):
        super().__init__( scanner, FEICodeTokens.TK_CAST, data )

class ICNode_CLASS( FEICodeNode ):
    def __init__(self, scanner=None, data='class'):
        super().__init__( scanner, FEICodeTokens.TK_CLASS, data )

class ICNode_COLON( FEICodeNode ):
    def __init__(self, scanner=None, data=':'):
        super().__init__( scanner, FEICodeTokens.TK_COLON, data )

class ICNode_COMMA( FEICodeNode ):
    def __init__(self, scanner=None, data=','):
        super().__init__( scanner, FEICodeTokens.TK_COMMA, data )

class ICNode_COMMENT( FEICodeNode ):
    def __init__(self, scanner=None, data='None'):
        super().__init__( scanner, FEICodeTokens.TK_COMMENT, data )

class ICNode_COMMENT_ML( FEICodeNode ):
    def __init__(self, scanner=None, data='None'):
        super().__init__( scanner, FEICodeTokens.TK_COMMENT_ML, data )

class ICNode_CONST( FEICodeNode ):
    def __init__(self, scanner=None, data='const'):
        super().__init__( scanner, FEICodeTokens.TK_CONST, data )

class ICNode_CONTINUE( FEICodeNode ):
    def __init__(self, scanner=None, data='continue'):
        super().__init__( scanner, FEICodeTokens.TK_CONTINUE, data )

class ICNode_DECR( FEICodeNode ):
    def __init__(self, scanner=None, data='--'):
        super().__init__( scanner, FEICodeTokens.TK_DECR, data )

class ICNode_DEL( FEICodeNode ):
    def __init__(self, scanner=None, data='del'):
        super().__init__( scanner, FEICodeTokens.TK_DEL, data )

class ICNode_DIV( FEICodeNode ):
    def __init__(self, scanner=None, data='/'):
        super().__init__( scanner, FEICodeTokens.TK_DIV, data )

class ICNode_DOT( FEICodeNode ):
    def __init__(self, scanner=None, data='.'):
        super().__init__( scanner, FEICodeTokens.TK_DOT, data )

class ICNode_ELIF( FEICodeNode ):
    def __init__(self, scanner=None, data='elif'):
        super().__init__( scanner, FEICodeTokens.TK_ELIF, data )

class ICNode_ELLIPSIS( FEICodeNode ):
    def __init__(self, scanner=None, data='...'):
        super().__init__( scanner, FEICodeTokens.TK_ELLIPSIS, data )

class ICNode_ELSE( FEICodeNode ):
    def __init__(self, scanner=None, data='else'):
        super().__init__( scanner, FEICodeTokens.TK_ELSE, data )

class ICNode_EMBED( FEICodeNode ):
    def __init__(self, scanner=None, data='embed'):
        super().__init__( scanner, FEICodeTokens.TK_EMBED, data )

class ICNode_EMBED_CODE( FEICodeNode ):
    def __init__(self, scanner=None, data='None'):
        super().__init__( scanner, FEICodeTokens.TK_EMBED_CODE, data )

class ICNode_ENSURE( FEICodeNode ):
    def __init__(self, scanner=None, data='ensure'):
        super().__init__( scanner, FEICodeTokens.TK_ENSURE, data )

class ICNode_ENUM( FEICodeNode ):
    def __init__(self, scanner=None, data='enum'):
        super().__init__( scanner, FEICodeTokens.TK_ENUM, data )

class ICNode_EOF( FEICodeNode ):
    def __init__(self, scanner=None, data='None'):
        super().__init__( scanner, FEICodeTokens.TK_EOF, data )

class ICNode_EQ( FEICodeNode ):
    def __init__(self, scanner=None, data='=='):
        super().__init__( scanner, FEICodeTokens.TK_EQ, data )

class ICNode_EXCEPT( FEICodeNode ):
    def __init__(self, scanner=None, data='except'):
        super().__init__( scanner, FEICodeTokens.TK_EXCEPT, data )

class ICNode_FALSE( FEICodeNode ):
    def __init__(self, scanner=None, data='false'):
        super().__init__( scanner, FEICodeTokens.TK_FALSE, data )

class ICNode_FILE( FEICodeNode ):
    def __init__(self, scanner=None, data='file'):
        super().__init__( scanner, FEICodeTokens.TK_FILE, data )

class ICNode_FINAL( FEICodeNode ):
    def __init__(self, scanner=None, data='final'):
        super().__init__( scanner, FEICodeTokens.TK_FINAL, data )

class ICNode_FINALLY( FEICodeNode ):
    def __init__(self, scanner=None, data='finally'):
        super().__init__( scanner, FEICodeTokens.TK_FINALLY, data )

class ICNode_FLOAT( FEICodeNode ):
    def __init__(self, scanner=None, data='None'):
        super().__init__( scanner, FEICodeTokens.TK_FLOAT, data )

class ICNode_FOR( FEICodeNode ):
    def __init__(self, scanner=None, data='for'):
        super().__init__( scanner, FEICodeTokens.TK_FOR, data )

class ICNode_FOREVER( FEICodeNode ):
    def __init__(self, scanner=None, data='forever'):
        super().__init__( scanner, FEICodeTokens.TK_FOREVER, data )

class ICNode_FROM( FEICodeNode ):
    def __init__(self, scanner=None, data='from'):
        super().__init__( scanner, FEICodeTokens.TK_FROM, data )

class ICNode_GE( FEICodeNode ):
    def __init__(self, scanner=None, data='>='):
        super().__init__( scanner, FEICodeTokens.TK_GE, data )

class ICNode_GT( FEICodeNode ):
    def __init__(self, scanner=None, data='>'):
        super().__init__( scanner, FEICodeTokens.TK_GT, data )

class ICNode_HASH( FEICodeNode ):
    def __init__(self, scanner=None, data='#'):
        super().__init__( scanner, FEICodeTokens.TK_HASH, data )

class ICNode_HIDDEN( FEICodeNodeProtection ):
    def __init__(self, scanner=None, data='hidden'):
            super().__init__( scanner, Access.HIDDEN, FEICodeTokens.TK_HIDDEN, data )

class ICNode_IDENT( FEICodeNode ):
    def __init__(self, scanner=None, data='None'):
        super().__init__( scanner, FEICodeTokens.TK_IDENT, data )

class ICNode_IF( FEICodeNode ):
    def __init__(self, scanner=None, data='if'):
        super().__init__( scanner, FEICodeTokens.TK_IF, data )

class ICNode_IMPORT( FEICodeNode ):
    def __init__(self, scanner=None, data='import'):
        super().__init__( scanner, FEICodeTokens.TK_IMPORT, data )

class ICNode_IN( FEICodeNode ):
    def __init__(self, scanner=None, data='in'):
        super().__init__( scanner, FEICodeTokens.TK_IN, data )

class ICNode_INCR( FEICodeNode ):
    def __init__(self, scanner=None, data='++'):
        super().__init__( scanner, FEICodeTokens.TK_INCR, data )

class ICNode_INTEGER( FEICodeNode ):
    def __init__(self, scanner=None, data='None'):
        super().__init__( scanner, FEICodeTokens.TK_INTEGER, data )

class ICNode_IS( FEICodeNode ):
    def __init__(self, scanner=None, data='is'):
        super().__init__( scanner, FEICodeTokens.TK_IS, data )

class ICNode_ISOF( FEICodeNode ):
    def __init__(self, scanner=None, data='->'):
        super().__init__( scanner, FEICodeTokens.TK_ISOF, data )

class ICNode_LANGUAGE( FEICodeNode ):
    def __init__(self, scanner=None, data='language'):
        super().__init__( scanner, FEICodeTokens.TK_LANGUAGE, data )

class ICNode_LE( FEICodeNode ):
    def __init__(self, scanner=None, data='<='):
        super().__init__( scanner, FEICodeTokens.TK_LE, data )

class ICNode_LIST( FEICodeNode ):
    def __init__(self, scanner=None, data='list'):
        super().__init__( scanner, FEICodeTokens.TK_LIST, data )

class ICNode_LT( FEICodeNode ):
    def __init__(self, scanner=None, data='<'):
        super().__init__( scanner, FEICodeTokens.TK_LT, data )

class ICNode_MAP( FEICodeNode ):
    def __init__(self, scanner=None, data='map'):
        super().__init__( scanner, FEICodeTokens.TK_MAP, data )

class ICNode_ME( FEICodeNode ):
    def __init__(self, scanner=None, data='me'):
        super().__init__( scanner, FEICodeTokens.TK_ME, data )

class ICNode_MINUS( FEICodeNode ):
    def __init__(self, scanner=None, data='-'):
        super().__init__( scanner, FEICodeTokens.TK_MINUS, data )

class ICNode_MOD( FEICodeNode ):
    def __init__(self, scanner=None, data='%'):
        super().__init__( scanner, FEICodeTokens.TK_MOD, data )

class ICNode_MUL( FEICodeNode ):
    def __init__(self, scanner=None, data='*'):
        super().__init__( scanner, FEICodeTokens.TK_MUL, data )

class ICNode_NE( FEICodeNode ):
    def __init__(self, scanner=None, data='!='):
        super().__init__( scanner, FEICodeTokens.TK_NE, data )

class ICNode_NL( FEICodeNode ):
    def __init__(self, scanner=None, data='new line'):
        super().__init__( scanner, FEICodeTokens.TK_NL, data )

class ICNode_NONE( FEICodeNode ):
    def __init__(self, scanner=None, data='none'):
        super().__init__( scanner, FEICodeTokens.TK_NONE, data )

class ICNode_NOP( FEICodeNode ):
    def __init__(self, scanner=None, data='nop'):
        super().__init__( scanner, FEICodeTokens.TK_NOP, data )

class ICNode_NOT( FEICodeNode ):
    def __init__(self, scanner=None, data='not'):
        super().__init__( scanner, FEICodeTokens.TK_NOT, data )

class ICNode_OPERATOR( FEICodeNode ):
    def __init__(self, scanner=None, data='operator'):
        super().__init__( scanner, FEICodeTokens.TK_OPERATOR, data )

class ICNode_OP_2COLN( FEICodeNode ):
    def __init__(self, scanner=None, data='::'):
        super().__init__( scanner, FEICodeTokens.TK_OP_2COLN, data )

class ICNode_OP_2EXCL( FEICodeNode ):
    def __init__(self, scanner=None, data='!!'):
        super().__init__( scanner, FEICodeTokens.TK_OP_2EXCL, data )

class ICNode_OP_2QUEST( FEICodeNode ):
    def __init__(self, scanner=None, data='??'):
        super().__init__( scanner, FEICodeTokens.TK_OP_2QUEST, data )

class ICNode_OP_GRLE( FEICodeNode ):
    def __init__(self, scanner=None, data='><'):
        super().__init__( scanner, FEICodeTokens.TK_OP_GRLE, data )

class ICNode_OR( FEICodeNode ):
    def __init__(self, scanner=None, data='or'):
        super().__init__( scanner, FEICodeTokens.TK_OR, data )

class ICNode_PARCL( FEICodeNode ):
    def __init__(self, scanner=None, data=')'):
        super().__init__( scanner, FEICodeTokens.TK_PARCL, data )

class ICNode_PAROP( FEICodeNode ):
    def __init__(self, scanner=None, data='('):
        super().__init__( scanner, FEICodeTokens.TK_PAROP, data )

class ICNode_PLUS( FEICodeNode ):
    def __init__(self, scanner=None, data='+'):
        super().__init__( scanner, FEICodeTokens.TK_PLUS, data )

class ICNode_POWER( FEICodeNode ):
    def __init__(self, scanner=None, data='^^'):
        super().__init__( scanner, FEICodeTokens.TK_POWER, data )

class ICNode_PROTECTED( FEICodeNodeProtection ):
    def __init__(self, scanner=None, data='protected'):
            super().__init__( scanner, Access.PROTECTED, FEICodeTokens.TK_PROTECTED, data )

class ICNode_PUBLIC( FEICodeNodeProtection ):
    def __init__(self, scanner=None, data='public'):
            super().__init__( scanner, Access.PUBLIC, FEICodeTokens.TK_PUBLIC, data )

class ICNode_RAISE( FEICodeNode ):
    def __init__(self, scanner=None, data='raise'):
        super().__init__( scanner, FEICodeTokens.TK_RAISE, data )

class ICNode_REPEAT( FEICodeNode ):
    def __init__(self, scanner=None, data='repeat'):
        super().__init__( scanner, FEICodeTokens.TK_REPEAT, data )

class ICNode_REQUIRE( FEICodeNode ):
    def __init__(self, scanner=None, data='require'):
        super().__init__( scanner, FEICodeTokens.TK_REQUIRE, data )

class ICNode_RETURN( FEICodeNode ):
    def __init__(self, scanner=None, data='return'):
        super().__init__( scanner, FEICodeTokens.TK_RETURN, data )

class ICNode_SCALAR_TYPE( FEICodeNode ):
    def __init__(self, scanner=None, data='None'):
        super().__init__( scanner, FEICodeTokens.TK_SCALAR_TYPE, data )

class ICNode_SEMICOLON( FEICodeNode ):
    def __init__(self, scanner=None, data=';'):
        super().__init__( scanner, FEICodeTokens.TK_SEMICOLON, data )

class ICNode_SET( FEICodeNode ):
    def __init__(self, scanner=None, data='set'):
        super().__init__( scanner, FEICodeTokens.TK_SET, data )

class ICNode_SHIFT0L( FEICodeNode ):
    def __init__(self, scanner=None, data='<<<'):
        super().__init__( scanner, FEICodeTokens.TK_SHIFT0L, data )

class ICNode_SHIFT0R( FEICodeNode ):
    def __init__(self, scanner=None, data='>>>'):
        super().__init__( scanner, FEICodeTokens.TK_SHIFT0R, data )

class ICNode_SHIFTL( FEICodeNode ):
    def __init__(self, scanner=None, data='<<'):
        super().__init__( scanner, FEICodeTokens.TK_SHIFTL, data )

class ICNode_SHIFTR( FEICodeNode ):
    def __init__(self, scanner=None, data='>>'):
        super().__init__( scanner, FEICodeTokens.TK_SHIFTR, data )

class ICNode_STATIC( FEICodeNode ):
    def __init__(self, scanner=None, data='static'):
        super().__init__( scanner, FEICodeTokens.TK_STATIC, data )

class ICNode_STRING( FEICodeNode ):
    def __init__(self, scanner=None, data='None'):
        super().__init__( scanner, FEICodeTokens.TK_STRING, data )

class ICNode_SWITCH( FEICodeNode ):
    def __init__(self, scanner=None, data='switch'):
        super().__init__( scanner, FEICodeTokens.TK_SWITCH, data )

class ICNode_TILD( FEICodeNode ):
    def __init__(self, scanner=None, data='~'):
        super().__init__( scanner, FEICodeTokens.TK_TILD, data )

class ICNode_TRUE( FEICodeNode ):
    def __init__(self, scanner=None, data='true'):
        super().__init__( scanner, FEICodeTokens.TK_TRUE, data )

class ICNode_TRY( FEICodeNode ):
    def __init__(self, scanner=None, data='try'):
        super().__init__( scanner, FEICodeTokens.TK_TRY, data )

class ICNode_TYPE_ALIAS( FEICodeNode ):
    def __init__(self, scanner=None, data='type'):
        super().__init__( scanner, FEICodeTokens.TK_TYPE_ALIAS, data )

class ICNode_UNEXPECTED( FEICodeNode ):
    def __init__(self, scanner=None, data='None'):
        super().__init__( scanner, FEICodeTokens.TK_UNEXPECTED, data )

class ICNode_UNNAMED( FEICodeNode ):
    def __init__(self, scanner=None, data='unnamed'):
        super().__init__( scanner, FEICodeTokens.TK_UNNAMED, data )

class ICNode_UNTIL( FEICodeNode ):
    def __init__(self, scanner=None, data='until'):
        super().__init__( scanner, FEICodeTokens.TK_UNTIL, data )

class ICNode_VOLATILE( FEICodeNode ):
    def __init__(self, scanner=None, data='volatile'):
        super().__init__( scanner, FEICodeTokens.TK_VOLATILE, data )

class ICNode_WHILE( FEICodeNode ):
    def __init__(self, scanner=None, data='while'):
        super().__init__( scanner, FEICodeTokens.TK_WHILE, data )

class ICNode_WITH( FEICodeNode ):
    def __init__(self, scanner=None, data='with'):
        super().__init__( scanner, FEICodeTokens.TK_WITH, data )

#=====   end of   FrontEnd.IntermediateCode.fe_icode_node   =====#
