/***
Copyright (c) 2019 Philippe Schmouker, schmouk (at) typee.ovh

Permission is hereby granted,  free of charge,  to any person obtaining a copy
of this software and associated documentation files (the "Software"),  to deal
in the Software without restriction, including  without  limitation the rights
to use,  copy,  modify,  merge,  publish,  distribute, sublicense, and/or sell
copies of the Software,  and  to  permit  persons  to  whom  the  Software  is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS",  WITHOUT WARRANTY OF ANY  KIND,  EXPRESS  OR
IMPLIED,  INCLUDING  BUT  NOT  LIMITED  TO  THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT  SHALL  THE
AUTHORS  OR  COPYRIGHT  HOLDERS  BE  LIABLE  FOR  ANY CLAIM,  DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT,  TORT OR OTHERWISE, ARISING FROM,
OUT  OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
***/

//=============================================================================
// Built-in library Files
// Module r_file.ty

// defined classes:
fwd class RFile;
fwd class RFile< ItemT >;

//=============================================================================
from Files.types     import FileCursorPos, FileIndex;
from Files.base_file import BaseFile;

//=============================================================================
class RFile : BaseFile
/**
Base class for all files with Read access rights in Typee  built-in  library 
Files. See also classes ROFile and RWFile.
Users should not instantiate this class, but should rather instantiate class
ROFile or class RWFile.  Many checkings are done in these inheriting classes
that are not evaluataed in constructors of this base class WFile.
*/
{
 :public:
 
    //-------------------------------------------------------------------------
    RFile()
    /**
    Default constructor.
    */
    {
        BaseFile();
    }
    //-------------------------------------------------------------------------
    RFile( ? in (str,str16) filepath, ? in (str,str16) rw_mode )
    /**
    Instantiates the file and  opens  it  with  specified  filepath  and  with
    specifed read/write mode.
    Raises FileNotFoundException if file  is  not  found or  if  file_path  is 
    incorrect,  FileAccessException  if  access to the file cannot be granted, 
    TypeException if any of the arguments is not a string, FileExistsException 
    when trying to create (with ‘w’ in rw_mode) an already existing file,  and 
    ValueException if argument rw_mode is not one of the three legalones.
    */
    {
        BaseFile( filepath, rw_mode );
    }

    //-------------------------------------------------------------------------
    RFile operator >> ( RFile f, ? item )
    /**
    Reads the specified item at current position of cursor or  index  in 
    the file.
    Returns a reference to current  instance,  for  this  method  to  be 
    cascadable with other methods and operators.
    Raises FileNotOpenedException  if  file  is  not  currently  opened, 
    FilePosException   in   case  of  out-of-bounds  indexing  and  also 
    FileNotOpenedException,  FileClosedException,   FileAccessException, 
    FilePermissionException, code>FileRWModeException, FileEOFException, 
    TypeException and FileException in case of related errors.
    */
    {
        me._checked_opened();
        me._file >> item;
        return me;
    }

    //-------------------------------------------------------------------------
    none operator >>= ( ? item )
    /**
    Reads the specified item at current position of cursor or  index  in 
    the file.
    Raises FileNotOpenedException  if  file  is  not  currently  opened, 
    FilePosException   in   case  of  out-of-bounds  indexing  and  also 
    FileNotOpenedException,  FileClosedException,   FileAccessException, 
    FilePermissionException, code>FileRWModeException, FileEOFException, 
    TypeException and FileException in case of related errors.
    */
    {
        me._checked_opened();
        me._file >>= item;
    }

    //-------------------------------------------------------------------------
    RFile operator >>> ( RFile f, list<(str,str16)> lines )
    /**
    Reads all text lines from current position of cursor and  until  the
    the end of the file.
    Returns a reference to current  instance,  for  this  method  to  be
    cascadable with other methods and operators.
    Raises FileNotOpenedException  if  file  is  not  currently  opened, 
    FilePosException   in   case  of  out-of-bounds  indexing  and  also 
    FileNotOpenedException,  FileClosedException,   FileAccessException, 
    FilePermissionException, code>FileRWModeException, FileEOFException, 
    TypeException and FileException in case of related errors.
    */
    {
        me._checked_opened();
        me._file >>> lines;
        return me;
    }

    //-------------------------------------------------------------------------
    none operator >>>= ( list<(str,str16)> lines )
    /**
    Reads all text lines from current position of cursor and  until  the
    end of the file.
    Raises FileNotOpenedException  if  file  is  not  currently  opened, 
    FilePosException   in   case  of  out-of-bounds  indexing  and  also 
    FileNotOpenedException,  FileClosedException,   FileAccessException, 
    FilePermissionException, code>FileRWModeException, FileEOFException, 
    TypeException and FileException in case of related errors.
    */
    {
        me._checked_opened();
        me._file >>>= lines;
    }

    //-------------------------------------------------------------------------
    const ? operator [] ( const ? in (FileCursorPos, FileIndex) pos )
    /**
    Sets the position of the cursor or of the index  according  to  the
    specified position.
    Returns a not mutable reference to the read item.
    Raises FileNotOpenedException  if  file  is  not  currently  opened, 
    FilePosException   in   case  of  out-of-bounds  indexing  and  also 
    FileNotOpenedException,  FileClosedException,   FileAccessException, 
    FilePermissionException, code>FileRWModeException, FileEOFException, 
    TypeException and FileException in case of related errors.
    Usage example:
        my_file[2] = 3.14159_26535_89793_23846_26433_83;
        // writes this long float64 at position 2 of file
        print( "{:.4f}".format( my_file[2] ) );
        // prints: 3.1416
    */
    {
        me._checked_opened();
        me._file.set_pos( pos );
        return me ;
    }

    //-------------------------------------------------------------------------
    RFile read( ? item )
    /**
    Reads the specified item at current position of cursor or  index  in 
    the file.
    Returns a reference to current  instance,  for  this  method  to  be 
    cascadable with other methods and operators.
    Raises FileNotOpenedException  if  file  is  not  currently  opened, 
    FilePosException   in   case  of  out-of-bounds  indexing  and  also 
    FileNotOpenedException,  FileClosedException,   FileAccessException, 
    FilePermissionException, code>FileRWModeException, FileEOFException, 
    TypeException and FileException in case of related errors.
    */
    {
        me._checked_opened();
        me._file.read( item );
        return me;
    }

    //-------------------------------------------------------------------------
    list< (str,str16) > readlines()
    /**
    Reads all strings from file,  starting at current position of  file  
    cursor and until end of file.
    Returns a reference to a list  containing  the  successive  strings 
    read from file.
    Raises FileNotOpenedException  if  file  is  not  currently  opened, 
    FilePosException   in   case  of  out-of-bounds  indexing  and  also 
    FileNotOpenedException,  FileClosedException,   FileAccessException, 
    FilePermissionException, code>FileRWModeException, FileEOFException, 
    TypeException and FileException in case of related errors.
    */
    {
        me._checked_opened();
        return me._file.read_lines( item );
    }
}


//=============================================================================
class RFile<ItemT> : RFile, BaseFile< ItemT >
/**
Base class for all files with declared types for their contained  items  and 
with Read access rights in Typee built-in  library Files.
See also classes WOFile<ItemT> and RWFile<itemT>.
Users should not instantiate this class, but should rather instantiate class
WOFile or class RWFile.  Many checkings are done in these inheriting classes
that are not evaluataed in constructors of this base class WFile.
*/
{}

//===== end of module   Files.r_file.ty   =====//
