/***
Copyright (c) 2019 Philippe Schmouker, schmouk (at) typee.ovh

Permission is hereby granted,  free of charge,  to any person obtaining a copy
of this software and associated documentation files (the "Software"),  to deal
in the Software without restriction, including  without  limitation the rights
to use,  copy,  modify,  merge,  publish,  distribute, sublicense, and/or sell
copies of the Software,  and  to  permit  persons  to  whom  the  Software  is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS",  WITHOUT WARRANTY OF ANY  KIND,  EXPRESS  OR
IMPLIED,  INCLUDING  BUT  NOT  LIMITED  TO  THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT  SHALL  THE
AUTHORS  OR  COPYRIGHT  HOLDERS  BE  LIABLE  FOR  ANY CLAIM,  DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT,  TORT OR OTHERWISE, ARISING FROM,
OUT  OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
***/

//=============================================================================
// Built-in library Random
// Module Bases/base_lcg.ty

//=============================================================================
from .Bases.base_random import BaseRandom;

//=============================================================================
class BaseLCG< InternT in (uint32,int64),
               const InternT COEFF_MULT ,
               const InternT CONST_ADD  ,
               const InternT MODULO       > : BaseRandom
/**
Definition of the base class for all LCG pseudo-random generators.

LCG models evaluate pseudo-random numbers suites x(i) as a simple mathem-
atical function of 

    x(i-1): x(i) = (a*x(i-1) + c) mod m 
 
Results  are  nevertheless  considered  to  be  poor  as  stated  in  the 
evaluation done by Pierre L'Ecuyer and Richard Simard (Universite de 
Montreal) in 'TestU01: A C Library for Empirical Testing of Random Number 
Generators  -  ACM  Transactions  on  Mathematical Software,  vol.33  n.4,  
pp.22-40,  August  2007'.  It is not recommended to use such pseudo-random 
numbers generators for serious simulation applications.

See Rand32 for a 2^32 (i.e. 4.3e+9)  period  LC-Generator  with  very  low 
computation  time  but shorter period and worse randomness characteristics
than for Rand63.
See Rand63 for a 2^63 (i.e. about 9.2e+18) period  LC-Generator  with  low
computation  time  also,   longer  period  and  really  better  randomness 
characteristics than for FastRand32.

Furthermore this class is callable.
Example:

  BaseLCG rand = BaseLCG();
  print( rand() );    # prints a uniform pseudo-random value within [0.0, 1.0)
  print( rand(a) );   # prints a uniform pseudo-random value within [0.0, a)
  print( rand(a,b) ); # prints a uniform pseudo-random value within [a  , b)

Reminder:
We give you here below a copy of the table of tests for the LCGs that have 
been  implemented  in Random,  as provided in paper "TestU01, ..."

| PyRabndLib class | TU01 generator name                | Memory Usage    | Period  | time-32bits | time-64 bits | SmallCrush fails | Crush fails | BigCrush fails |
| ---------------- | ---------------------------------- | --------------- | ------- | ----------- | ------------ | ---------------- | ----------- | -------------- |
|     Rand32       | LCG(2^32, 69069, 1)                |     1 x 4-bytes | 2^32    |    3.20     |     0.67     |         11       |     106     |   *too many*   |
|     Rand63       | LCG(2^63, 9219741426499971445, 1)  |     2 x 4-bytes | 2^63    |    4.20     |     0.75     |          0       |       5     |       7        |

* _small crush_ is a small set of simple tests that quickly tests some  of
the expected characteristics for a pretty good PRG;
* _crush_ is a bigger set of tests that test more deeply  expected  random 
characteristics;
* _big crush_ is the ultimate set of difficult tests  that  any  GOOD  PRG 
should definitively pass.
*/
 {    
  :public:

    //-------------------------------------------------------------------------
    BaseLCG()
    /**
    Constructor.
    The local system time is used (with its shuffled value) as a seed.
    */
    {
        me.set_state();
    }
    //-------------------------------------------------------------------------
    BaseLCG( const ? in (InternT, float32, float64) seed_value )
    /**
    Constructor.
    */
    {
        me.set_state( seed_value );
    }
 
    //-------------------------------------------------------------------------
    InternT get_state()
    /**
    Returns an object capturing the current internal state of the generator.
    This object can be passed to set_state() to restore the state.
    For LCG, the state is defined with a single integer, 'me._value',  which  
    has  to  be used in methods'random() and 'setstate() of every inheriting 
    class.
    */
    {
        return me._value;
    }

    //-------------------------------------------------------------------------
    const float64 random(self)
    /**
    This is the core of the pseudo-random generator.
    Returned values are within [0.0, 1.0).
    */
    {
        me._value = (COEFF_MULT * me._value + CONST_ADD) % MODULO;
        return me._value / float64(MODULO);
    }

    //-------------------------------------------------------------------------
    abstract none set_state();
    /**
    Should set internal state using local time as initial seed.
    */
    //-------------------------------------------------------------------------
    none set_state( const InternT state)
    /**
    state should have been obtained  from a previous call to getstate(),
    and  setstate() restores the internal state of the generator to what
    it was at the time setstate() was called.
    */
    {
        me._value = state;
    }
    //-------------------------------------------------------------------------
    none set_state( const ? in (float32,float64) seed_value )
    /**
    Sets state with seed_value, according to its amplitude.
    */
    {
        if ( seed_value < 0.0 )
            seed_value = -seed_value;
        
        if ( seed_value >= 1.0 )
            me._value = seedT( seed_value + 0.5 );
        else
            me._value = seedT( seed_value * KMAX );
    }

    //-------------------------------------------------------------------------
    protected InternT  _value;  // the internal state for every instances of LCGs
}

//===== end of module   Random.Bases.base_lcg.ty   =====//
