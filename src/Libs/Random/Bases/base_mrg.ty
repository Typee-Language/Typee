/***
Copyright (c) 2019-2021 Philippe Schmouker, schmouk (at) typee.ovh

Permission is hereby granted,  free of charge,  to any person obtaining a copy
of this software and associated documentation files (the "Software"),  to deal
in the Software without restriction, including  without  limitation the rights
to use,  copy,  modify,  merge,  publish,  distribute, sublicense, and/or sell
copies of the Software,  and  to  permit  persons  to  whom  the  Software  is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS",  WITHOUT WARRANTY OF ANY  KIND,  EXPRESS  OR
IMPLIED,  INCLUDING  BUT  NOT  LIMITED  TO  THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT  SHALL  THE
AUTHORS  OR  COPYRIGHT  HOLDERS  BE  LIABLE  FOR  ANY CLAIM,  DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT,  TORT OR OTHERWISE, ARISING FROM,
OUT  OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
***/

//=============================================================================
// Built-in library Random
// Module Bases/base_mrg.ty

//=============================================================================
from Random.rand32 import Rand32;
from Random.Bases.base_random import BaseRandom;

//=============================================================================
class BaseMRG<const uint16 K_SIZE> : BaseRandState< Rand32, uint32, K_SIZE >
/**
Definition of the base class for all MRG pseudo-random generators.

Multiple Recursive Generators (MRGs) uses  recurrence  to  evaluate  pseudo-random
numbers series. Recurrence is of the form:

   x(i) = A * SUM[ x(i-k) ]  mod M,

for 2 to more different values of k.

MRGs offer very large periods with the best known results  in  the  evaluation  of 
their  randomness,  as  stated  in  the  evaluation  done  by  Pierre L'Ecuyer and 
Richard Simard (Université de Montréal)  in "TestU01:  A C Library  for  Empirical 
Testing of Random  Number Generators  - ACM Transactions on Mathematical Software, 
vol.33 n.4, pp.22-40, August 2007".  It is recommended to use  such  pseudo-random
numbers generators rather than LCG ones for serious simulation applications.
   
See Rand287 for  a  short  period  MR-Generator (2^287,  i.e. 2.49e+86)  with  low
computation time but 256 integers memory consumption.
See Rand1457 for a longer period MR-Generator (2^1457, i.e. 4.0e+438)  and  longer
computation  time (2^31-1 modulus calculations)  but less memory space consumption 
(47 integers).
See Rand49507 for a  far  longer  period  (2^49507,  i.e. 1.2e+14903)  with  lower 
computation  time  too  (32-bits  modulus)  but  use  of  more  memory space (1597 
integers).

Please notice that this class and all its inheriting sub-classes are callable.
Example:

  rand = BaseMRG()
  print( rand() )    # prints a uniform pseudo-random value within [0.0, 1.0)
  print( rand(a) )   # prints a uniform pseudo-random value within [0.0, a)
  print( rand(a,b) ) # prints a uniform pseudo-random value within [a  , b)

Reminder:
We give you here below a copy of the table of tests for the LCGs that have 
been implemented in PyRandLib, as provided in paper "TestU01, ...".

| class name | TU01 generator name | Memory Usage    | Period  | time-32bits | time-64 bits | SmallCrush fails | Crush fails | BigCrush fails |
| ---------- | ------------------- | --------------- | ------- | ----------- | ------------ | ---------------- | ----------- | -------------- |
|  Rand287   | Marsa-LFIB4         |   256 x 4-bytes |   2^287 |    3.40     |     0.8      |          0       |       0     |       0        |
|  Rand1457  | DX-47-3             |    47 x 4-bytes |  2^1457 |    n.a.     |     1.4      |          0       |       0     |       0        |
|  Rand49507 | DX-1597-2-7         | 1,597 x 4-bytes | 2^49507 |    n.a.     |     1.4      |          0       |       0     |       0        |

* _small crush_ is a small set of simple tests that quickly tests some  of
the expected characteristics for a pretty good PRG;
* _crush_ is a bigger set of tests that test more deeply  expected  random 
characteristics;
* _big crush_ is the ultimate set of difficult tests  that  any  GOOD  PRG 
should definitively pass.
*/
{
  :public:

    //-------------------------------------------------------------------------
    BaseMRG()
    /**
    Constructor.
    The shuffling of the local current time value is used as the 
    initial seed.
    */
    {
        me.set_state();
    }
    //-------------------------------------------------------------------------
    BaseMRG( const MyInternalState seed_state )
    /**
    Constructor.
    seed_state is a valid internal state that has been previously loaded in 
    memory with get_state().
    */
    {
        me.set_state( seed_state );
    }
}
 
//=====   end of module   Random.Bases.base_mrg.ty   =====//
