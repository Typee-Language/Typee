/***
Copyright (c) 2019 Philippe Schmouker, schmouk (at) typee.ovh

Permission is hereby granted,  free of charge,  to any person obtaining a copy
of this software and associated documentation files (the "Software"),  to deal
in the Software without restriction, including  without  limitation the rights
to use,  copy,  modify,  merge,  publish,  distribute, sublicense, and/or sell
copies of the Software,  and  to  permit  persons  to  whom  the  Software  is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS",  WITHOUT WARRANTY OF ANY  KIND,  EXPRESS  OR
IMPLIED,  INCLUDING  BUT  NOT  LIMITED  TO  THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT  SHALL  THE
AUTHORS  OR  COPYRIGHT  HOLDERS  BE  LIABLE  FOR  ANY CLAIM,  DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT,  TORT OR OTHERWISE, ARISING FROM,
OUT  OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
***/

//=============================================================================
from .Bases.basemrg import BaseMRG


//=============================================================================
class Rand49507 : BaseMRG< 1597 > as Base49507
/**
Pseudo-random numbers generator  - Definition of a fast 32-bits Multiple Recursive
Generator with long period (1.2e+14_903).

Multiple Recursive Generators (MRGs)  use  recurrence  to  evaluate  pseudo-random
numbers suites. Recurrence is of the form:

   x(i) = A * SUM[ x(i-k) ]  mod M,

for 2 to more different values of k.

MRGs offer very large periods with the best known results  in  the  evaluation  of 
their  randomness,  as  stated  in  the  evaluation  done  by  Pierre L'Ecuyer and 
Richard Simard (Universite de Montreal)  in "TestU01:  A C Library  for  Empirical 
Testing of Random  Number Generators  - ACM Transactions on Mathematical Software, 
vol.33 n.4, pp.22-40, August 2007".  It is recommended to use  such  pseudo-random
numbers generators rather than LCG ones for serious simulation applications.

The implementation of this MRG 31-bits model is based on the 'DX-1597-2-7' MRG. It
uses the recurrence

    x(i) = (-2^25-2^7) * (x(i-7) + x(i-1597)) mod (2^31-1)
    
and  offers  a  period  of  about  2^49507  -  i.e. nearly 1.2e+14_903  -  with low 
computation time.

See Rand287 for  a  short  period  MR-Generator (2^287,  i.e. 2.49e+86)  with  low
computation time but 256 32-bits integers memory consumption.
See Rand1457 for a longer period  (2^1_457, i.e. 3.98e+438)  with  low  computation
time too (31-bits modulus) but use of more memory space (1,597 32-bits integers).
  
Furthermore this class is callable.
Example:

  Rand49507 rand = Rand49507()
  print( rand() );    // prints a uniform pseudo-random value within [0.0, 1.0)
  print( rand(a) );   // prints a uniform pseudo-random value within [0.0, a)
  print( rand(a,b) ); // prints a uniform pseudo-random value within [a  , b)

Notice that for simulating the roll of a dice you should code this way:

  Rand49507 diceRoll = Rand49507();
  print( int(diceRoll(1, 7)) ); // prints a uniform roll within set {1, 2, 3, 4, 5, 6}

Reminder:
We give you here below a copy of the table of tests for the MRGs that have 
been implemented in Libs.Random, as provided in paper "TestU01, ..." - see
file README.md.

| class name | TU01 generator name | Memory Usage    | Period  | time-32bits | time-64 bits | SmallCrush fails | Crush fails | BigCrush fails |
| ---------- | ------------------- | --------------- | ------- | ----------- | ------------ | ---------------- | ----------- | -------------- |
|  Rand287   | Marsa-LFIB4         |   256 x 4-bytes |   2^287 |    3.40     |     0.8      |          0       |       0     |       0        |
|  Rand1457  | DX-47-3             |    47 x 4-bytes |  2^1457 |    n.a.     |     1.4      |          0       |       0     |       0        |
|  Rand49507 | DX-1597-2-7         | 1,597 x 4-bytes | 2^49507 |    n.a.     |     1.4      |          0       |       0     |       0        |

* _small crush_ is a small set of simple tests that quickly tests some  of
the expected characteristics for a pretty good PRG;
* _crush_ is a bigger set of tests that test more deeply  expected  random 
characteristics;
* _big crush_ is the ultimate set of difficult tests  that  any  GOOD  PRG 
should definitively pass.
*/
{
    //-------------------------------------------------------------------------
    Rand49507()
    /**
    Constructor.
    The shuffling of the local current time value is used as the initial seed.
    */
    {
        Base49507();
    }
    
    //-------------------------------------------------------------------------
    Rand49507( const MyInternalState seed_state )
    /**
    Constructor.
    seed_state is an internal state that has been gotten back from a former
    call to get_state().
    */
    {
        Base49507( seed_state );
    }
    
    //-------------------------------------------------------------------------
    const float64 random();
    /**
    This is the core of the pseudo-random generator.
    Returned values should be uniformly distributed within [0.0, 1.0).
    */
    {
        // evaluates indexes in suite for the i-1, i-24 (and i-47) -th values
        int16 k7  = self._state._index - 7;
        if( k < 0 )
            k7 = Base49507.K_SIZE - 1;
        
        // then evaluates current value
        const uint32 myValue =
            ( -33_554_560 *
                (self._state._list[k7] + self._state._list[self._state._index]) ) % 2_147_483_647;
        self._state._list[self._state._index] = myValue;
        
        // next index
        self._state._index = (self._state._index + 1) % Base49507.K_SIZE;
        
        // then returns float value within [0.0, 1.0)
        return  myValue / 2_147_483_647.0;
 
//=====   end of module   rand49507.py   =====//
