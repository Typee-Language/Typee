/***
Copyright (c) 2019-2020 Philippe Schmouker, schmouk (at) typee.ovh

Permission is hereby granted,  free of charge,  to any person obtaining a copy
of this software and associated documentation files (the "Software"),  to deal
in the Software without restriction, including  without  limitation the rights
to use,  copy,  modify,  merge,  publish,  distribute, sublicense, and/or sell
copies of the Software,  and  to  permit  persons  to  whom  the  Software  is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS",  WITHOUT WARRANTY OF ANY  KIND,  EXPRESS  OR
IMPLIED,  INCLUDING  BUT  NOT  LIMITED  TO  THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT  SHALL  THE
AUTHORS  OR  COPYRIGHT  HOLDERS  BE  LIABLE  FOR  ANY CLAIM,  DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT,  TORT OR OTHERWISE, ARISING FROM,
OUT  OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
***/

//=============================================================================
// Built-in library Thread
// Module thread_guarded_block.ty

// defined classes
fwd class ThreadGuardedBlock;
fwd class ThreadNamedGuardedBlock;

//=============================================================================
from Thread.thread_mutex import ThreadMutex;


//=============================================================================
class ThreadGuardedBlock : ThreadMutex
/**
Guarded blocks (of statements) are parts of code that cannot be processed 
simultaneously by different threads.
A mutual exclusive access is applied to them.
*/
{
 :public:

    //-------------------------------------------------------------------------
    ThreadGuardedBlock()
    /**
    Default constructor.
    */
    {
        ThreadMutex();
        me.lock();
    }

    //-------------------------------------------------------------------------
    none destroy ()
    /**
    Destructor.
    Caution:
    Behaviors may differ between different targeted programming languages.
    */
    {
        me.unlock();
    }
}


//=============================================================================
class ThreadNamedGuardedBlock : ThreadGuardedBlock
/**
Named Guarded blocks (of statements) are used to guard a dedicated part of
code with statement 'with'.
Example:
    with ThreadNamedGuardedBlock( 'block-1' ){
        // ... guarded block of statements ...
    }
*/
{
 :public:

    //-------------------------------------------------------------------------
    ThreadNamedGuardedBlock( ? name )
    /**
    Constructor.
    name is the name associated with the guarded block of instruction.
    It may be of any hashable type (string, integer, object, etc.)
    */
    {
        if ( name in me._names )
            me._names[ name ].lock();
        else
        {
            me._name = name;
            me._names[ name ] = ThreadGuardedBlock();
        }
    }

    //-------------------------------------------------------------------------
    none destroy ()
    /**
    Destructor.
    Caution:
    Behaviors may differ between different targeted programming languages.
    */
    {
        me._names[ me._name ].unlock();
    }
    
 :hidden:
    //-------------------------------------------------------------------------
    ? _name;
    static map _names = []:
}

//===== end of module   Thread.thread_guarded_block.ty   =====//
