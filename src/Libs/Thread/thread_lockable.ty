/***
Copyright (c) 2019 Philippe Schmouker, schmouk (at) typee.ovh

Permission is hereby granted,  free of charge,  to any person obtaining a copy
of this software and associated documentation files (the "Software"),  to deal
in the Software without restriction, including  without  limitation the rights
to use,  copy,  modify,  merge,  publish,  distribute, sublicense, and/or sell
copies of the Software,  and  to  permit  persons  to  whom  the  Software  is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS",  WITHOUT WARRANTY OF ANY  KIND,  EXPRESS  OR
IMPLIED,  INCLUDING  BUT  NOT  LIMITED  TO  THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT  SHALL  THE
AUTHORS  OR  COPYRIGHT  HOLDERS  BE  LIABLE  FOR  ANY CLAIM,  DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT,  TORT OR OTHERWISE, ARISING FROM,
OUT  OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
***/

//=============================================================================
// Built-in library Thread
// Module thread_lockable.ty

//=============================================================================
from Thread.thread_exceptions import ThreadInterruptedException, UnlockedException;

//=============================================================================
// targeted languages specifics
embed py {{
import threading
}}

embed java {{
import java.util.concurrent.locks;
import java.util.concurrent.TimeUnit;
}}

//=============================================================================
class ThreadLockable
/**
Typee implementation of the mutex concept. Mutual Exclusion is associated 
with  objects  for  which access  from threads must be exclusive:  no two
different threads may simultaneously get access to this object.
This is the class which defines the mutual exclusion between threads  for
an object. Classes which inherit form Lockable get this functionnality.
Notice: not applicable to statement 'with'.
*/

embed py {{ : threading.Lock }}
embed java {{ extends ReentrantLock }}
{
 :public:

    //-------------------------------------------------------------------------
    ThreadLockable()
    /**
    Default constructor.
    */
    {
      embed py {{
        super().__init__()
      }}
      
      embed java {{
        super();
      }}
    }

    //-------------------------------------------------------------------------
    none destroy ()
    /**
    Destructor.
    Caution:
    Behaviors may differ between different targeted programming languages.
    */
    {
      embed py {{
        super().__del__()
      }}
    }

    //-------------------------------------------------------------------------
    final none lock() exclude java
    /**
    Infinitively blocking version to acquire access to the mutually exclusive 
    access to the object.
    */
    {
      embed py {{
        self.acquire( True )
      }}
    }

    //-------------------------------------------------------------------------
    final const bool lock()
    /**
    Non blocking version to acquire access to the mutually exclusive 
    access to the object.
    Returns true if object has been acquired and false otherwise. 
    */
    {
      embed py {{
        return self.acquire( False )
      }}
      
      embed java {{
        return tryLock();
      }}
    }

    //-------------------------------------------------------------------------
    final const bool lock( const float32 timeout )
    /**
    Timed-out blocking version to acquire access to the  mutually  exclusive 
    access to the object.
    Returns true when object has been acquired and  false  if  not  acquired 
    after the specified timeout duration (unit: seconds).
    Raises ThreadTimeoutValueException  on  some  platforms  when  specified 
    timeout is too big.
    Raises ThreadInterruptedException if waiting thread has been interrupted.
    Raises AssertException if timeout is negative.
    */
    {
        assert timeout >= 0.0;
        
      embed py {{
        try:
            return self.acquire( True, timeout )
        except:
            raise ThreadTimeoutValueException( timeout )
      }}
      
      embed java {{
        try {
            tryLock( (long)(timeout * 1000.0 + 0.5, TimeUnit.MILLISECONDS);
        }
        catch (InterruptedException e) {
            raise ThreadInterruptedException()
        }
      }}
    }
    
    //-------------------------------------------------------------------------
    final none unlock() exclude java
    /**
    Releases this object for it to be acquirable again.
    Raises UnlockedException when unlocking  an  object 
    that is not currently locked.
    Caution: with some targeted languages (e.g. Python),
    objects may be unlocked from any thread and not only
    from the thread which had locked the object.
    */
    {
      embed py {{
        try:
            return self.release()
        except:
            raise UnlockedException( self )
      }}
    }
}

//===== end of module   Thread.thread_lockable.ty   =====//
