/***
Copyright (c) 2019 Philippe Schmouker, schmouk (at) typee.ovh

Permission is hereby granted,  free of charge,  to any person obtaining a copy
of this software and associated documentation files (the "Software"),  to deal
in the Software without restriction, including  without  limitation the rights
to use,  copy,  modify,  merge,  publish,  distribute, sublicense, and/or sell
copies of the Software,  and  to  permit  persons  to  whom  the  Software  is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS",  WITHOUT WARRANTY OF ANY  KIND,  EXPRESS  OR
IMPLIED,  INCLUDING  BUT  NOT  LIMITED  TO  THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT  SHALL  THE
AUTHORS  OR  COPYRIGHT  HOLDERS  BE  LIABLE  FOR  ANY CLAIM,  DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT,  TORT OR OTHERWISE, ARISING FROM,
OUT  OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
***/

//=============================================================================
// Built-in library Thread
// Module base_thread.ty

// defined class
fwd class BaseThread;

//=============================================================================
from Thread.thread_exceptions import all ;

//=============================================================================
// targeted languages specifics
embed py {{
import threading
import time
}}

embed cpp {{
#include <std::chrono>
#include <std::list>
#include <std::memory>
#include <std::string>
#include <std::thread>
}}

//=============================================================================
class BaseThread
/**
Base class for threads in Typee built-in library  Thread.
Defines  or  declares  every basic operations.  When just 
declared as abstract, those operations have to be implem-
ented in inheriting classes.
Notice: no priorities are managed for threads.  They  all
get the same, medium, priority in Typee.
*/

embed py   {{ : threading.Thread }}
embed java {{ extends Thread }}

{
 :public:

    //-------------------------------------------------------------------------
    BaseThread()
    /**
    Default constructor.
    Notice:
    No constructor with a runnable function as its  argument  is 
    provided in Typee, while this is common in other programming
    languages. The only way to make a thread runnable is by impl-
    ementing the abstract method run().
    */
    embed cpp {{ : _c_name("unnamed-thread"), _c_thread(NULL) }}
    {
      embed py {{
        super().__init__()
      }}
      
      embed java {{
        super();
        setDaemon( false );
      }}
    }

    //-------------------------------------------------------------------------
    BaseThread( const ? in (str,str16) name )
    /**
    Constructor with defined name for this thread.
    */
    embed cpp {{ : _c_name(name), _c_thread(NULL) }}
    {
      embed py {{
        super().__init__( name=name )
      }}
      
      embed java {{
        super( name );
        setDaemon( false );
      }}
    }
  
    //-------------------------------------------------------------------------
    none destroy ()  exclude py, java
    /**
    Destructor for this base class.
    Caution:
    Behaviors may differ between different targeted programming languages.
    Deprecated or not allowed in Python and Java because deadlock-prone.
    */
    {
      embed cpp {{
        if (this->_c_thread != NULL)
        {
            this->_c_threads_list.remove( this );
            delete this->_c_thread;
        }
      }}
    }
  
    //-------------------------------------------------------------------------
    static final BaseThread get_current()
    /**
    Returns a reference to the currently active thread.
    Returns none if not available on targeted platform.
    */
    {
      embed py {{
        return threading.current_thread()
      }} exit
      
      embed java {{
        return this.currentThread();
      }} exit
      
      return none;
    }

    //-------------------------------------------------------------------------
    static final const uint32 get_active_ID()
    /**
    Returns the identifier of the currently active thread.
    Returns 0xffff_ffff if not available on targeted platform.
    */
    {
      embed py {{
        return threading.get_ident()
      }} exit
      
      embed java {{
        return this.currentThread().getId();
      }} exit
      
        return 0xffff_ffff;
    }

    //-------------------------------------------------------------------------
    final const uint32 get_ID()
    /**
    Returns the identifier of this thread.
    */
    {
      embed py {{
        return self.ident
      }}
      
      embed java {{
        return this.getId();
      }}
      
      embed cpp {{
        return this->_c_thread->get_id();
      }}
    }

    //-------------------------------------------------------------------------
    static final BaseThread get_main_thread()
    /**
    Returns a reference to the Main thread or 'none' if not available for
    some platforms (e.g. C++).
    */
    {
      embed py {{
        return threading.main_thread()
      }} exit
      
      embed java {{
        return this->_main_thread;
      }} exit
      
        return none;
    }

    //-------------------------------------------------------------------------
    static final const uint32 get_stack_size()
    /**
    Returns the stack size allocated to newly created threads.
    See method set_stack_size().
    Returns 0 if this information is not available (e.g. Java, C++).
    */
    {
      embed py {{
        return threading.stack_size()
      }} exit
      
        return 0;
    }

    //-------------------------------------------------------------------------
    static final const uint32 get_threads_count()
    /**
    Returns the number of currently active threads.
    Returns 0 if this information is not available (e.g. C++).
    */
    {
      embed py {{
        return threading.active_count()
      }}
      
      embed java {{
        return this.activeCount();
      }}
    
      embed cpp {{
        return std::distance( this->_c_threads_list.begin, this->_c_threads_list.end );
      }}
    }

    //-------------------------------------------------------------------------
    static final list<BaseThread> get_threads_list()
    /**
    Returns a list of currently active threads.
    Returns 'none' if this information is not available (e.g. C++).
    */
    {
      embed py {{
        return threading.enumerate()
      }}
      
      embed java {{
        return this.enumerate();
      }}
      
      embed cpp {{
        return this->_c_threads_list;
      }}
    }

    //-------------------------------------------------------------------------
    none interrupt() exclude py, java, cpp
    /**
    Interrupts this thread.
    Caution:
    Behaviors may differ between different targeted programming languages.
    Deprecated or not allowed in Python and Java because deadlock-prone.
    */
    {}

    //-------------------------------------------------------------------------
    final const bool is_active()
    /**
    Returns true if this thread is the active one.
    Returns false otherwise.
    Caution: C++ implementation may lead to some issues.
    */
    {
      embed cpp {{
        return this->_c_thread != NULL;
      }} exit
      
        return me.get_ID() == me.get_active_ID();
    }

    //-------------------------------------------------------------------------
    final const bool is_alive() exclude py, java
    /**
    Returns true if this thread has been started and is not stopped.
    Returns false otherwise.
    Returns true if this information is not available (e.g. C++).
    */
    {
      embed cpp {{
        return this->_c_thread != NULL;
      }} exit
      
      return true;
    }

    //-------------------------------------------------------------------------
    const bool is_daemon() exclude java
    /**
    Returns true if this thread is daemonic, and false otherwise.
    */
    {
      embed py {{
        return self.daemon
      }}
      
      embed cpp {{
        return false;
      }}
    }

    //-------------------------------------------------------------------------
    none join() exclude java
    /**
    This is a synchronization point for external code. When joining  with  this
    thread, the external code waits (is blocked) until this threads terminates.
    */
    {
      embed py {{
        try:
            super().join()
        except:
            raise ThreadJoinException( self )
      }}
      
      embed cpp {{
        try {
            this->_c_thread->join();
        }
        catch (std::system_error se) {
            if ( se.code() == std::resource_deadlock_would_occur )
                throw ThreadDeadlockException( se.what() );
            else
                throw ThreadException( se.what() );
        }
      }}
    }

    //-------------------------------------------------------------------------
    none join( const float32 timeout )
    /**
    This is a synchronization point for external code. When joining  with  this
    thread, the external code waits (is blocked) until this threads terminates.
    'timeout' is the timeout duration, in seconds, before this thread dies.
    Raises AssertException if specified duration is negative.
    Caution: Behaviors may differ between different platforms.
    */
    {
        assert seconds >= 0.0;
        
      embed py {{
        time.sleep( seconds )
      }}
      
      embed java {{
        super.join( (long)( seconds * 1000.0 + 0.5) );
      }}
      
      embed cpp {{
        sleep( seconds );
        join();
      }}
    }

    //-------------------------------------------------------------------------
    const ? in (str, str16) name()
    /**
    Returns the name associated with this thread.
    */
    {
      embed py {{
        return self.name
      }}
      
      embed java {{
        return this.getName();
      }}
      
      embed cpp {{
        return this->_c_name;
      }}
    }

    //-------------------------------------------------------------------------
    str operator cast str ()
    /**
    Returns a string representation of this thread.
    */
    {
      return str( me.name() );
    }

    //-------------------------------------------------------------------------
    str16 operator cast str16 ()
    /**
    Returns a string representation of this thread.
    Caution: behavior may fidder from different platforms.
    */
    {
      return str16( me.name() );
    }

    //-------------------------------------------------------------------------
    none resume() exclude py, java, cpp
    /**
    Resumes this thread after having been stopped.
    Caution:
    Behaviors may differ between different targeted programming languages.
    Deprecated or not allowed in Python and Java because deadlock-prone.
    */
    {}

    //-------------------------------------------------------------------------
    abstract none run();
    /**
    This is the definition of this thread processings. Method run() is ran
    when method start() is called.
    MUST be implemented in inheriting classes.
    */

    //-------------------------------------------------------------------------
    none set_name( const ? in (str,str16) _name )
    /**
    Sets the name for this thread.
    */
    {
      embed py {{
        self.name = _name
      }}
      
      embed java {{
        this.setName( _name );
      }}
      
      embed cpp {{
        this->_c_name = name;
      }}
    }

    //-------------------------------------------------------------------------
    static final bool set_stack_size( const uint32 size )
    /**
    Sets the stack size (bytes count) allocated to newly created threads.
    Returns true if available for targeted platform and false otherwise.
    See method get_stack_size().
    Raises ThreadStackSizeException if specified size is an erroneous one
    for the targeted platform.
    Caution:
    For some platform, these sizes get strong constraints, e.g. in Python, 
    sizes must be greater than 32,767 bytes (i.e. at least 32 KB) and they
    may have to be multiple of 4.096 (i.e. 4 KB) for some Operating  Syst-
    ems.  For some other platforms (e.g. Java),  there is no way to modify 
    the threads stacks size programmatically.
    */
    {
      embed py {{
        try:
            threading.stack_size( size )
            return True
        except:
            raise ThreadStackSizeException( size )
      }} exit
      
        return false;
    }

    //-------------------------------------------------------------------------
    none sleep( const float32  timeout )
    /**
    Puts this thread to sleep for the specified duration (unit: seconds).
    Raises AssertException if duration is negative.
    */
    {
        assert timeout >= 0.0;
        
      embed py {{
        time.sleep( timeout )
      }}
      
      embed java {{
        super.sleep( (long)(timeout * 1000.0 + 0.5) );
      }}
      
      embed cpp {{
        std::this_thread::sleep_for( std::chrono::milliseconds( (long)(timeout + 1000.0 + 0.5) ) );
      }}
    }

    //-------------------------------------------------------------------------
    none start() exclude java
    /**
    Starts this thread in a new thread context and runs its method run().
    Raises ThreadException if thread cannot be created or run.
    */
    {
      embed py {{
        try:
            super().start()
        except:
            raise ThreadStartException( self )
      }}
      
      embed cpp {{
        try {
            this->_c_thread = new std::thread( this->run, this );
            this->_c_threads_list.insert( this );
        } catch ( ... ) {
            throw ThreadException( "cannot create thread" );
        }
      }}
    }

    //-------------------------------------------------------------------------
    none stop() exclude py, java, cpp
    /**
    Stops this thread.
    Caution:
    Behaviors may differ between different targeted programming languages.
    Deprecated or not allowed in Python and Java because deadlock-prone.
    */
    {}

    //-------------------------------------------------------------------------
    none suspend() exclude py, java, cpp
    /**
    Suspends this thread.
    Caution:
    Behaviors may differ between different targeted programming languages.
    Deprecated or not allowed in Python and Java because deadlock-prone.
    */
    {}

 :protected:
    //------------------------------------------------------------------------- 
  embed java {{    
    static long _main_thread = Thread.currentThread();
  }}
  
  embed cpp {{
    std::string    _c_name;
    std::thread *  _c_thread;
    static std::atomic< std::forward_list<BaseThread*> >  _c_threads_list;
  }}
}

//===== end of module   Thread.base_thread.ty   =====//
