/***
Copyright (c) 2019 Philippe Schmouker, schmouk (at) typee.ovh

Permission is hereby granted,  free of charge,  to any person obtaining a copy
of this software and associated documentation files (the "Software"),  to deal
in the Software without restriction, including  without  limitation the rights
to use,  copy,  modify,  merge,  publish,  distribute, sublicense, and/or sell
copies of the Software,  and  to  permit  persons  to  whom  the  Software  is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS",  WITHOUT WARRANTY OF ANY  KIND,  EXPRESS  OR
IMPLIED,  INCLUDING  BUT  NOT  LIMITED  TO  THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT  SHALL  THE
AUTHORS  OR  COPYRIGHT  HOLDERS  BE  LIABLE  FOR  ANY CLAIM,  DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT,  TORT OR OTHERWISE, ARISING FROM,
OUT  OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
***/

//=============================================================================
// Built-in library Thread
// Module base_thread.ty

//=============================================================================
from Thread.thread_exceptions import all ;

//=============================================================================
// targeted languages specifics
embed py {{
import threading
}}

//=============================================================================
class BaseThread
/**
Base class for threads in Typee built-in library  Thread.
Defines  or  declares  every basic operations.  When only 
declared as abstract, those operations have to be implem-
ented in inheriting classes.
*/

embed py {{ : threading.Thread }}

{
 :public:

    //-------------------------------------------------------------------------
    BaseThread()
    /**
    Default constructor.
    Notice:
    No constructor with a runnable function as its  argument  is 
    provided in Typee, while this is common in other programming
    languages. The only way to make a thread runnable is by impl-
    ementing the abstract method run().
    */
    {
      embed py {{
        super().__init__()
      }}
    }

    //-------------------------------------------------------------------------
    BaseThread( const ? in (str,str16) name )
    /**
    Constructor with defined name for this thread.
    */
    {
      embed py {{
        super().__init__( name=name )
      }}
    }

    //-------------------------------------------------------------------------
    none destroy ()
    /**
    Destructor for this base class.
    Caution:
    Behaviors may differ between different targeted programming languages.
    */
    {
      embed py {{
        pass  ## in Python, threads cannot be destroyed
      }}
    }

    //-------------------------------------------------------------------------
    static final BaseThread get_current()
    /**
    Returns a reference to the currently active thread.
    */
    {
      embed py {{
        return threading.current_thread()
      }}
    }

    //-------------------------------------------------------------------------
    static final const uint32 get_active_ID()
    /**
    Returns the identifier of the currently active thread.
    */
    {
      embed py {{
        return threading.get_ident()
      }}
    }

    //-------------------------------------------------------------------------
    final const uint32 get_ID()
    /**
    Returns the identifier of this thread.
    */
    {
      embed py {{
        return self.ident
      }}
    }

    //-------------------------------------------------------------------------
    static final BaseThread get_main_thread()
    /**
    Returns a reference to the Main thread.
    */
    {
      embed py {{
        return threading.main_thread()
      }}
    }

    //-------------------------------------------------------------------------
    static final const uint32 get_stack_size()
    /**
    Returns the stack size allocated to newly created threads.
    See method set_stack_size().
    */
    {
      embed py {{
        return threading.stack_size()
      }}
    }

    //-------------------------------------------------------------------------
    static final const uint32 get_threads_count()
    /**
    Returns the number of currently active threads.
    */
    {
      embed py {{
        return threading.active_count()
      }}
    }

    //-------------------------------------------------------------------------
    static final list<BaseThread> get_threads_list()
    /**
    Returns a list  of currently active threads.
    */
    {
      embed py {{
        return threading.enumerate()
      }}
    }

    //-------------------------------------------------------------------------
    none interrupt()
    /**
    Interrupts this thread.
    Caution:
    Behaviors may differ between different targeted programming languages.
    */
    {
      embed py {{
        pass  ## in Python, threads cannot be interrupted
      }}
    }

    //-------------------------------------------------------------------------
    final const bool is_active()
    /**
    Returns true if this thread is the active one.
    Returns false otherwise.
    */
    {
        return me.get_ID() == me.get_active_ID();
    }

    //-------------------------------------------------------------------------
    final const bool is_alive()
    /**
    Returns true if this thread has been started and is not stopped.
    Returns false otherwise.
    */
    {
      embed py {{
        return self.is_alive()
      }}
    }

    //-------------------------------------------------------------------------
    const bool is_daemon()
    /**
    Returns true if this thread is daemonic, and false otherwise.
    */
    {
      embed py {{
        return self.daemon
      }}
    }

    //-------------------------------------------------------------------------
    none join()
    /**
    This is a synchronization point for external code. When joining  with  this
    thread, the external code waits (is blocked) until this threads terminates.
    */
    {
      embed py {{
        try:
            self.join()
        except:
            raise ThreadJoinException( self )
      }}
    }

    //-------------------------------------------------------------------------
    const ? in (str, str16) name()
    /**
    Returns the name associated with this thread.
    */
    {
      embed py {{
        return self.name
      }}
    }

    //-------------------------------------------------------------------------
    none resume()
    /**
    Resumes this thread after having been stopped.
    Caution:
    Behaviors may differ between different targeted programming languages.
    */
    {
      embed py {{
        pass  ## in Python, threads cannot be resumed nor suspended
      }}
    }

    //-------------------------------------------------------------------------
    abstract none run( ... args );
    /**
    This is the definition of this thread processings. Method run() is ran
    when method start() is called.
    args is a variable arguments that may be useful for the processings of
    this thread.
    To be implemented in inheriting classes.
    */

    //-------------------------------------------------------------------------
    none set_name( const ? in (str,str16) _name )
    /**
    Sets the name for this thread.
    */
    {
      embed py {{
        self.name = _name
      }}
    }

    //-------------------------------------------------------------------------
    static final none set_stack_size( const uint32 size )
    /**
    Sets the stack size (bytes count) allocated to newly created threads.
    See method get_stack_size().
    Raises ThreadStackSizeException if specified size is an erroneous one
    for the targeted platform.
    Caution:
    For some platform, these sizes get strong constraints, e.g. in Python, 
    sizes must be greater than 32,767 bytes (i.e. at least 32 KB) and they
    may have to be multiple of 4.096 (i.e. 4 KB) for some Operating  Syst-
    ems.    
    */
    {
      embed py {{
        try:
            return threading.stack_size( size )
        except:
            raise ThreadStackSizeException( size )
      }}
    }

    //-------------------------------------------------------------------------
    none start()
    /**
    Starts this thread in a new thread context and runs its method run().
    */
    {
      embed py {{
        try:
            self.start()
        except:
            raise ThreadStartException( self )
      }}
    }

    //-------------------------------------------------------------------------
    none stop()
    /**
    Stops this thread.
    Caution:
    Behaviors may differ between different targeted programming languages.
    */
    {
      embed py {{
        pass  ## in Python, threads cannot be stopped
      }}
    }

    //-------------------------------------------------------------------------
    none suspend()
    /**
    Suspends this thread.
    Caution:
    Behaviors may differ between different targeted programming languages.
    */
    {
      embed py {{
        pass  ## in Python, threads cannot be suspended nor interrupted
      }}
    }
}

//===== end of module   Thread.base_thread.ty   =====//
