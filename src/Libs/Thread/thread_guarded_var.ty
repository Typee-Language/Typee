/***
Copyright (c) 2019-2021 Philippe Schmouker, schmouk (at) typee.ovh

Permission is hereby granted,  free of charge,  to any person obtaining a copy
of this software and associated documentation files (the "Software"),  to deal
in the Software without restriction, including  without  limitation the rights
to use,  copy,  modify,  merge,  publish,  distribute, sublicense, and/or sell
copies of the Software,  and  to  permit  persons  to  whom  the  Software  is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS",  WITHOUT WARRANTY OF ANY  KIND,  EXPRESS  OR
IMPLIED,  INCLUDING  BUT  NOT  LIMITED  TO  THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT  SHALL  THE
AUTHORS  OR  COPYRIGHT  HOLDERS  BE  LIABLE  FOR  ANY CLAIM,  DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT,  TORT OR OTHERWISE, ARISING FROM,
OUT  OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
***/

//=============================================================================
// Built-in library Thread
// Module thread_guarded_var.ty

// defined class
fwd class ThreadGuardedVar;

//=============================================================================
from Thread.thread_mutex import ThreadMutex;


//=============================================================================
class ThreadGuardedVar< VarT >
/**
Guarded variables are variables that are protected from concurrent access.
*/
{
 :public:

    //-------------------------------------------------------------------------
    ThreadGuardedVar()
    /**
    Default constructor.
    */
    {
        me._mutex = ThreadMutex();
    }

    //-------------------------------------------------------------------------
    ThreadGuardedVar( const VarT value )
    /**
    Sets initial value of variable content.
    */
    {
        me._mutex = ThreadMutex();
        me._val = value;
    }

    //-------------------------------------------------------------------------
    none destroy ()
    /**
    Destructor.
    Caution:
    Behaviors may differ between different targeted programming languages.
    */
    {
        del me._mutex;
    }

    //-------------------------------------------------------------------------
    const VarT get()
    /**
    Returns the guarded value of this variable.
    */
    {
        me._mutex.lock();
        const VarT ret_value = me._val;
        me._mutex.unlock();
        return ret_value;
    }

    //-------------------------------------------------------------------------
    const VarT set( const VarT value )
    /**
    Assigns value to this guarded variable.
    Returns its new value.
    */
    {
        me._mutex.lock();
        me._val = value;
        me._mutex.unlock();
        return value;
    }

    //-------------------------------------------------------------------------
    const VarT operator cast VarT ()
    /**
    Returns the guarded value of this variable.
    */
    {
        return me.get();
    }

    //-------------------------------------------------------------------------
    const VarT operator = ( const VarT value )
    /**
    Assigns value to this guarded variable.
    */
    {
        return me.set( value );
    }

 :hidden:
    //-------------------------------------------------------------------------
    VarT        _val;
    ThreadMutex _mutex;
}

//===== end of module   Thread.thread_guarded_var.ty   =====//
