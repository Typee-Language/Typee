/***
Copyright (c) 2019 Philippe Schmouker, schmouk (at) typee.ovh

Permission is hereby granted,  free of charge,  to any person obtaining a copy
of this software and associated documentation files (the "Software"),  to deal
in the Software without restriction, including  without  limitation the rights
to use,  copy,  modify,  merge,  publish,  distribute, sublicense, and/or sell
copies of the Software,  and  to  permit  persons  to  whom  the  Software  is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS",  WITHOUT WARRANTY OF ANY  KIND,  EXPRESS  OR
IMPLIED,  INCLUDING  BUT  NOT  LIMITED  TO  THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT  SHALL  THE
AUTHORS  OR  COPYRIGHT  HOLDERS  BE  LIABLE  FOR  ANY CLAIM,  DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT,  TORT OR OTHERWISE, ARISING FROM,
OUT  OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
***/

//=============================================================================
// Built-in library Thread
// Module thread_condition.ty

// defined class
fwd class ThreadCondition;

//=============================================================================
from Thread.lockable          import Lockable;
from Thread.thread_exceptions import ThreadInterruptedException, ThreadTimeoutValueException;

//=============================================================================
// targeted languages specifics
embed py {{
import threading
}}

embed java {{
import java.util.concurrent.locks;
import java.util.concurrent.TimeUnit;
}}

embed cpp {{
#include <condition_variable>
}}

//=============================================================================
class ThreadCondition
/**
Threads may wait on Condition instances and can be signaled the end of the 
wait by a signal.
*/

embed py {{ : threading.Condition }}

{
 :public:

    //-------------------------------------------------------------------------
    ThreadCondition()
    /**
    Default constructor.
    */
    {
      embed py {{
        super().__init__()
      }}
      
      embed java {{
        this._jv_lock = new ReentrantLock();
        this._jv_cond = this._jv_lock.newCondition();
      }}
    }

    //-------------------------------------------------------------------------
    ThreadCondition( Lockable lock )
    /**
    Default constructor.
    */
    {
      embed py {{
        super().__init__( lock )
      }}
      
      embed java {{
        this._jv_lock = lock;
        this._jv_cond = lock.newCondition();
      }}
    }

    //-------------------------------------------------------------------------
    none destroy ()
    /**
    Destructor.
    Caution:
    Behaviors may differ between different targeted programming languages.
    */
    {}
    
    //-------------------------------------------------------------------------
    final none signal()
    /**
    'Awakens' one thread (from maybe many) waiting on this condition variable.
    */
    {
      embed py {{
        return self.notify( 1 )
      }}
      
      embed java {{
        this._jv_cond.signal();
      }}
    }
    
    //-------------------------------------------------------------------------
    final none signal_all()
    /**
    'Awakens' all threads waiting on this condition variable.
    */
    {
      embed py {{
        return self.notify_all()
      }}
      
      embed java {{
        this._jv_cond.signalAll();
      }}
    }

    //-------------------------------------------------------------------------
    final none wait()
    /**
    Calling thread waits on this condition instance until signalled.
    Raises ThreadInterruptedException if the waiting thread has been 
    interrupted.
    See methods signal() and signal_all().
    */
    {
      embed py {{
        self.wait()
      }}
      
      embed java {{
        try {
            this._jv_cond.await();
        }
        catch (InterruptedException e) {
            raise ThreadInterruptedException();
        }
      }}
    }

    //-------------------------------------------------------------------------
    final const bool wait( const float32 timeout )
    /**
    Timed-out waiting version applied to threads.
    Returns true when returning from wait before timeout duration 
    (unit: seconds), and False if timed-out.
    Raises ThreadTimeoutValueException  on  some  platforms  when 
    specified timeout has a too big value.
    Raises ThreadInterruptedException if the waiting  thread  has 
    been interrupted.
    Raises AssertException if timeout is negative.
    */
    {
        assert timeout >= 0.0;
        
      embed py {{
        try:
            return self.wait( timeout )
        except:
            raise ThreadTimeoutValueException()
      }}
      
      embed java {{
        try {
            return this._jv_cond.await( (long)(timeout * 1000.0 + 0.5), TimeUnit.MILLISECONDS );
        }
        catch (InterruptedException e) {
            raise ThreadInterruptedException();
        }
      }}
    }

 :protected:
    //-------------------------------------------------------------------------
  embed java {{
    ReentrantLock _jv_lock;
    Condition     _jv_cond;
  }}
}

//===== end of module   Thread.thread_condition.ty   =====//
