/***
Copyright (c) 2019 Philippe Schmouker, schmouk (at) typee.ovh

Permission is hereby granted,  free of charge,  to any person obtaining a copy
of this software and associated documentation files (the "Software"),  to deal
in the Software without restriction, including  without  limitation the rights
to use,  copy,  modify,  merge,  publish,  distribute, sublicense, and/or sell
copies of the Software,  and  to  permit  persons  to  whom  the  Software  is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS",  WITHOUT WARRANTY OF ANY  KIND,  EXPRESS  OR
IMPLIED,  INCLUDING  BUT  NOT  LIMITED  TO  THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT  SHALL  THE
AUTHORS  OR  COPYRIGHT  HOLDERS  BE  LIABLE  FOR  ANY CLAIM,  DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT,  TORT OR OTHERWISE, ARISING FROM,
OUT  OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
***/

//=============================================================================
// Built-in library Thread
// Module thread_event.ty

//=============================================================================
from Thread.thread_exceptions import ThreadTimeoutValueException;

//=============================================================================
// targeted languages specifics
embed py {{
import threading
}}

//=============================================================================
class ThreadEvent  embed java {{ extends ??? }}
/**
Typee implementation of the event synchronization concept.
Waiting on events is blocking (with optional timeout) while
the event is unset and until the event becomes set.
*/

embed py {{ : threading.Event }}

{
 :public:

    //-------------------------------------------------------------------------
    Event()
    /**
    Default constructor.
    */
    {
      embed py {{
        super().__init__()
      }}
    }

    //-------------------------------------------------------------------------
    final const bool is_set() exclude py
    /**
    Returns true if this event is currently in set mode, and false otherwise.
    */
    {
    }

    //-------------------------------------------------------------------------
    final none set() exclude py
    /**
    Any blocked thread waiting on this event becomes awakened.
    Any thread waiting then on this event doesn't get blocked.
    */
    {
    }

    //-------------------------------------------------------------------------
    final none unset()
    /**
    Any thread waiting then on this event will get blocked.
    */
    {
      embed py {{
        super().clear()
      }}
    }

    //-------------------------------------------------------------------------
    final none wait() exclude py
    /**
    Blocks the caller thread until this event becomes set.
    */
    {
    }

    //-------------------------------------------------------------------------
    final const bool wait( const float32 timeout )
    /**
    Blocks the caller thread until this event becomes set or  until  timeout.
    Returns true if the event became set before timeout, and false otherwise.
    Raises ThreadTimeoutValueException if the value of timeout value  is  too  
    big compared with allowed values on the targeted platform.
    */
    {
      embed py {{
        try:
            return super().wait( timeout )
        except:
            raise ThreadTimeoutValueException( timeout )
      }}
    }
}

//===== end of module   Thread.thread_event.ty   =====//
