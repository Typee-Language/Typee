/***
Copyright (c) 2019 Philippe Schmouker, schmouk (at) typee.ovh

Permission is hereby granted,  free of charge,  to any person obtaining a copy
of this software and associated documentation files (the "Software"),  to deal
in the Software without restriction, including  without  limitation the rights
to use,  copy,  modify,  merge,  publish,  distribute, sublicense, and/or sell
copies of the Software,  and  to  permit  persons  to  whom  the  Software  is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS",  WITHOUT WARRANTY OF ANY  KIND,  EXPRESS  OR
IMPLIED,  INCLUDING  BUT  NOT  LIMITED  TO  THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT  SHALL  THE
AUTHORS  OR  COPYRIGHT  HOLDERS  BE  LIABLE  FOR  ANY CLAIM,  DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT,  TORT OR OTHERWISE, ARISING FROM,
OUT  OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
***/

//=============================================================================
// Built-in library Thread
// Module semaphore.ty

//=============================================================================
from Thread.thread_exceptions import UnlockedException;

//=============================================================================
// targeted languages specifics
embed py {{
import threading
}}

//=============================================================================
class Semaphore
/**
Typee implementation of the semaphore concept.
Notice: methods P() and V(), initially proposed by the inventor of semaphores
Dutch scientist Edsger W. Dijkstra,  are available as wrappers for this class 
methods lock() and unlock(). 
*/

embed py {{ : threading.Semaphore }}

{
 :public:

    //-------------------------------------------------------------------------
    Semaphore()
    /**
    Default constructor. Internal atomic counter is set to 1.
    */
    {
      embed py {{
        super().__init__( 1 )
      }}
    }

    //-------------------------------------------------------------------------
    Semaphore( const uint32 n )
    /**
    Default constructor. Internal atomic counter is set to n.
    */
    {
      embed py {{
        super().__init__( n )
      }}
    }

    //-------------------------------------------------------------------------
    none destroy ()
    /**
    Destructor.
    Caution:
    Behaviors may differ between different targeted programming languages.
    */
    {
      embed py {{
        super().__del__()
      }}
    }

    //-------------------------------------------------------------------------
    final none lock()
    /**
    Infinitely blocking lock on this semaphore until awoken by unlock() (called
    by another thread).
    */
    {
      embed py {{
        self.acquire( True )
      }}
    }

    //-------------------------------------------------------------------------
    final const bool lock()
    /**
    Non blocking lock on this semaphore.
    Returns true if semaphore passed and false otherwise. 
    */
    {
      embed py {{
        return self.acquire( False )
      }}
    }

    //-------------------------------------------------------------------------
    final const bool lock( const float32 timeout )
    /**
    Timed-out blocking version on this semaphore.
    Returns true when semaphore has passed and false if not after the 
    specified timeout duration (unit: seconds).
    Raises ThreadTimeoutValueException on some platforms when specified 
    timeout is too big.
    Raises AssertException if timeout is negative.
    */
    {
        assert timeout >= 0.0;
        
      embed py {{
        try:
            return self.acquire( True, timeout )
        except:
            raise ThreadTimeoutValueException( timeout )
      }}
    }
    
    //-------------------------------------------------------------------------
    final none unlock()
    /**
    Releases this semaphore.
    */
    {
      embed py {{
        try:
            return self.release()
        except:
            raise UnlockedException( self )
      }}
    }
}

//===== end of module   Thread.semaphore.ty   =====//
