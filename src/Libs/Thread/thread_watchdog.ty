/***
Copyright (c) 2019-2020 Philippe Schmouker, schmouk (at) typee.ovh

Permission is hereby granted,  free of charge,  to any person obtaining a copy
of this software and associated documentation files (the "Software"),  to deal
in the Software without restriction, including  without  limitation the rights
to use,  copy,  modify,  merge,  publish,  distribute, sublicense, and/or sell
copies of the Software,  and  to  permit  persons  to  whom  the  Software  is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS",  WITHOUT WARRANTY OF ANY  KIND,  EXPRESS  OR
IMPLIED,  INCLUDING  BUT  NOT  LIMITED  TO  THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT  SHALL  THE
AUTHORS  OR  COPYRIGHT  HOLDERS  BE  LIABLE  FOR  ANY CLAIM,  DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT,  TORT OR OTHERWISE, ARISING FROM,
OUT  OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
***/

//=============================================================================
// Built-in library Thread
// Module thread_watchdog.ty

// defined class
fwd class ThreadWatchdog;

//=============================================================================
from Thread.thread_timer import ThreadTimer;

//=============================================================================
class ThreadWatchdog
/**
Typee implementation of the watchdog concept.
Watchdogs are commonly used in Real-Time application. They are waiting threads
which are awakened after a timeout to process some errors-cleaning tasks. They
run forever (until stopped) and may be reset from times to times.
*/
{
 :public:

    //-------------------------------------------------------------------------
    ThreadWatchdog( const ? in (str,str16) name )
    /**
    Constructor.
    */
    {
        me._initialize_timer( name );
    }

    //-------------------------------------------------------------------------
    none destroy()
    /**
    Destructor. Cancels/stops this timer.
    */
    {
      delete me._timer;
    }

    //-------------------------------------------------------------------------
    abstract protected none _run();
    /**
    Runs the internal code for this watch-dog.
    MUST BE IMPLEMENTED IN INHERITING CLASSES.
    */    

    //-------------------------------------------------------------------------
    str operator cast str ()
    {
        return str( me._timer );
    }
    //-------------------------------------------------------------------------
    str16 operator cast str16 ()
    {
        return str16( me._timer );
    }

    //-------------------------------------------------------------------------
    final none reset()
    /**
    Resets this watch-dog: the timeout period is initialized again.
    */
    {
        me._initialize_timer( me._timer.name );
        me._timer.start( me._current_period );
    }

    //-------------------------------------------------------------------------
    final none reset( const float32 period )
    /**
    Resets this watch-dog: the timeout period is initialized again 
    with a new value.
    */
    {
        me._current_period = period;
        me.reset();
    }

    //-------------------------------------------------------------------------
    final none start( const float32 period )
    /**
    Starts the infinite running of this watch-dog.
    Internally calls method '_run()' .
    Infinite running can be stopped by deleting the watch-dog.
    Raises TimerStartException if starting again a running watch-dog.
    Raises AssertException if period (unit: seconds) is negative.
    */
    {
        me._current_period = period;
        me._timer.start( period );
    }

 :hidden:
    //-------------------------------------------------------------------------
    final none _initialize_timer( const ? in (str,str16) name) {
        if ( me._timer is not none )
            del me._timer;
        me._timer = me._MyTimer( name );
    }

    //-------------------------------------------------------------------------
    class _MyTimer : ThreadTimer
    /**
    Internal class for the timers associated with watchdogs.
    */
    {
     :public:
        //---------------------------------------------------------------------
        _MyTimer( const ? in (str,str16) name )
        /**
        Constructor.
        */
        {
            ThreadTimer( name );
        }
        //---------------------------------------------------------------------
        none run()
        /**
        This is the definition of the code run with this  timer.
        It internally calls protected and abstract method _run()
        which MUST be implemented in any inheriting class.
        */    
        {
            me.ThreadWatchdog._run();
        }
    }
    
    //-------------------------------------------------------------------------
    float32  _current_period;
    _MyTimer _timer;
}

//===== end of module   Thread.thread_watchdog.ty   =====//
